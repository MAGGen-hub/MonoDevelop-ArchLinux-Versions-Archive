<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoDevelop.DotNetCore</name>
    </assembly>
    <members>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreProjectExtension.IsSdkProject(MonoDevelop.Projects.DotNetProject)">
            <summary>
            Currently this project extension is enabled for all SDK style projects and
            not just for .NET Core and .NET Standard projects. SDK project support
            should be separated out from this extension so it can be enabled only for
            .NET Core and .NET Standard projects.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreProjectExtension.OnProjectModified(System.Object,MonoDevelop.Projects.SolutionItemModifiedEventArgs)">
            <summary>
            Cannot use SolutionItemExtension.OnModified. It does not seem to be called.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreProjectExtension.ProjectTargetFrameworkChanged(System.Object,MonoDevelop.PackageManagement.ProjectTargetFrameworkChangedEventArgs)">
            <summary>
            This event is fired after the project is saved. Runs a restore if the project was
            not reloaded.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreProjectExtension.OnReferenceAddedToProject(MonoDevelop.Projects.ProjectReferenceEventArgs)">
            <summary>
            Shared projects can trigger a reference change during re-evaluation so do not
            restore if the project is being re-evaluated. Otherwise this could cause the
            restore to be run repeatedly.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreProjectExtension.OnReferenceRemovedFromProject(MonoDevelop.Projects.ProjectReferenceEventArgs)">
            <summary>
            Shared projects can trigger a reference change during re-evaluation so do not
            restore if the project is being re-evaluated. Otherwise this could cause the
            restore to be run repeatedly.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreProjectExtension.OnBoundToSolution">
            <summary>
            Handle a new project being created and added to a new solution. In this case
            the NuGet packages should be restored. Need to avoid running a restore when
            a solution is being opened so check that project's parent solution is open in
            the IDE.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreProjectExtension.IsFromSharedProject(MonoDevelop.Projects.MSBuild.IMSBuildItemEvaluated)">
            <summary>
            Checks that the project has the HasSharedItems property set to true and the SharedGUID
            property in its global property group. Otherwise it is not considered to be a shared project.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreProjectExtension.OnItemsAdded(System.Collections.Generic.IEnumerable{MonoDevelop.Projects.ProjectItem})">
            <summary>
            HACK: Hide certain files that are currently being added to the Solution window.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreProjectExtension.OnGetReferences(MonoDevelop.Projects.ConfigurationSelector,System.Threading.CancellationToken)">
            <summary>
            Returns all transitive references.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreProjectExtension.GetTransitiveAssemblyReferences(System.Collections.Generic.HashSet{System.String},System.Collections.Generic.List{MonoDevelop.Projects.AssemblyReference},MonoDevelop.Projects.ConfigurationSelector,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Recursively gets all transitive project references for .NET Core projects
            and if includeNonProjectReferences is true also returns non project
            assembly references.
            
            Calling base.OnGetReferences returns the directly referenced projects and
            also all transitive references which are not project references.
            
            includeNonProjectReferences should be set to false when getting the
            assembly references for referenced projects since the assembly references
            from OnGetReferences already contains any transitive references which are
            not projects.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreProjectExtension.OnGetDefaultBuildAction(System.String)">
            <summary>
            ASP.NET Core projects have different build actions if the file is in the wwwroot folder.
            It also uses Content build actions for *.json, *.config and *.cshtml files. To support
            this the default file globs for the file are found and the MSBuild item name is returned.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCorePath.GetDotNetFileNameOnWindows">
            <summary>
            IDE runs as a 32-bit process on Windows. Look for the 64 bit .NET Core SDK
            first by using the ProgramW6432 environment variable. Then fallback to
            looking in Program Files (x86).
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.Templating.DotNetCoreProjectTemplateWizard.GetTotalPages">
            <summary>
            When only .NET Core 2.0 is installed there is only one option in the drop down
            list for the target framework for .NET Core projects so there is no point in displaying
            the wizard since nothing can be changed. If .NET Core 1.0 is installed then there is at
            least two options available. If the .NET Standard project template is selected then there
            are multiple options available. So here a check is made to see if more than one target
            framework is available. If not then the wizard will not be displayed.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.Templating.DotNetCoreProjectTemplateWizard.RemoveUnsupportedNetStandardTargetFrameworksForFSharp(System.Collections.Generic.List{MonoDevelop.Core.Assemblies.TargetFramework})">
            <summary>
            The F# project templates do not support .NET Standard below 1.6 so do not allow them to
            be selected.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.Templating.DotNetCoreProjectTemplateWizard.RemoveUnsupportedNetCoreApp1xTargetFrameworks(System.Collections.Generic.List{MonoDevelop.Core.Assemblies.TargetFramework})">
            <summary>
            FSharp class library project template and the Razor Pages project template do not support
            targeting 1.x versions so remove these frameworks.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.Templating.DotNetCoreProjectTemplateWizard.ConfigureDefaultParameters">
            <summary>
            Set default parameter values if no wizard will be displayed.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.Templating.DotNetCoreProjectTemplateWizard.ConfigureDefaultNetCoreAppFramework">
            <summary>
            Framework needs to be specified for .NET Core library projects if only one runtime/sdk
            is available. Otherwise .NETStandard will be used for the target framework of the project.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.Templating.DotNetCoreProjectTemplateStringTagProvider.GetTemplateFileNamePrefix(System.String)">
            <summary>
            Returns a project template file name prefix. For example:
            "microsoft.dotnet.common.projecttemplates."
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.Templating.DotNetCoreProjectTemplateStringTagProvider.GetDotNetCoreSdkTemplatesDirectory(System.String)">
            <summary>
            Only .NET Core SDKs 2.1/2.2 are supported.
            </summary>
        </member>
        <member name="F:MonoDevelop.DotNetCore.Templating.DotNetCoreProjectTemplateStringTagProvider.DirectoryExists">
            <summary>
            Used by unit tests.
            </summary>
        </member>
        <member name="F:MonoDevelop.DotNetCore.Templating.DotNetCoreProjectTemplateStringTagProvider.EnumerateFiles">
            <summary>
            Used by unit tests.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreProjectReloadMonitor.GetUnknownProjects">
            <summary>
            Gets all unknown projects that are not deliberately unloaded.
            Deliberately unloaded projects have Enabled set to false.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreProjectReader.IsDotNetCoreProjectFile(MonoDevelop.Core.FilePath)">
            <summary>
            Check the Project element contains an Sdk and ToolsVersion attribute.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreProjectReader.GetDotNetCoreSdk(MonoDevelop.Core.FilePath)">
            <summary>
            Returns the first Sdk property defined by the project, if any exists
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.MSBuildProjectExtensions.RemoveExtraProjectReferenceMetadata(MonoDevelop.Projects.MSBuild.MSBuildProject)">
            <summary>
            Remove Name and Project from project references.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreSdkPaths.CheckIsSupportedSdkVersion(System.String)">
            <summary>
            .NET Core SDK version needs to be at least 1.0.0
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreMSBuildProject.ReadProjectHeader(MonoDevelop.Projects.MSBuild.MSBuildProject)">
            <summary>
            Ensure MSBuildProject has ToolsVersion set to 15.0 so the correct
            MSBuild targets are imported.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreCanReferenceProjectExtension.CanReferenceNetStandardProject(MonoDevelop.Projects.DotNetProject,MonoDevelop.Projects.DotNetProject)">
            <summary>
            Handle any failures to parse the target framework.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreProjectBuilderMaintainer.OnProjectReload(MonoDevelop.PackageManagement.ProjectReloadedEventArgs)">
            <summary>
            If the target framework of the project has changed then non .NET Core projects
            that reference this project may need their project builders refreshed so
            that the correct build result occurs. If the new framework is incompatible
            then without the project builder refresh then the build error will not appear
            until the solution is reloaded.
            </summary>
        </member>
        <member name="T:MonoDevelop.DotNetCore.Gui.DotNetCoreSdkLocationWidget.CustomFileSelector">
            <summary>
            This is slightly different from the standard FileSelector. When the select file
            dialog is cancelled the current directory is not remembered. This keeps the
            behaviour consistent with the other SDK pages that use the FileSelector from
            MonoDevelop.Components.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreProjectSupportedTargetFrameworks.GetDefaultNetStandard1xTargetFrameworks">
            <summary>
            These are the .NET Standard target frameworks that the sdks that ship with 
            Mono's MSBuild support.
            </summary>
        </member>
        <member name="T:MonoDevelop.DotNetCore.DummyMSBuildOptionsPanel">
            <summary>
            Used to hide the MSBuild option for .NET Core projects since these
            projects always use MSBuild.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.FilePathExtensions.ShouldBeHidden(MonoDevelop.Core.FilePath)">
            <summary>
            HACK: Hide certain files in Solution window. The solution's .userprefs
            file is the only file is included properly with the .NET Core MSBuild
            targets.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.NodeBuilders.PackageDependencyNode.IsSupported(System.Boolean)">
            <summary>
            Sdk dependencies have IsReadOnly set to true.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.NodeBuilders.PackageDependencyNode.GetChildDiagnosticStatusMessage">
            <summary>
            Use the diagnostic message if there is only one direct diagnostic child. Otherwise
            return a message indicating the diagnostic message can be seen by expanding
            the package.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.NodeBuilders.PackageDependencyNodeBuilder.GetSortIndex(MonoDevelop.Ide.Gui.Components.ITreeNavigator)">
            <summary>
            Ensure diagnostics appear first before NuGet package dependencies.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.NodeBuilders.SdkDependenciesNode.GetDefaultNodes">
            <summary>
            Returns a SDK node for the project whilst the package dependencies are still loading.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreSdkInstalledCondition.Evaluate(Mono.Addins.NodeElement)">
             <summary>
             The SDK version check is not quite correct. It currently only checks the
             latest installed version when it should check all versions installed.
             The runtime check also needs improving. Currently it only checks that dotnet
             is available. It should check the runtimes installed so it is possible
             to create a .NET Core 2.0 project if only the 2.0 runtime is installed.
            
             Note that the .NET Core SDK version is the logical version. Currently
             .NET Core SDK 2.1.4 supports .NET Core 2.0 projects but it is considered
             here to be version 2.0. .NET Core 2.1.300 supports .NET Core 2.1 projects
             so it is considered to be version 2.1, .NET Core 2.2.100 supports .NET Core
             2.2 projects
             </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreSdkInstalledCondition.SdkVersionSupported(Mono.Addins.NodeElement,MonoDevelop.DotNetCore.DotNetCoreVersion[])">
            <summary>
            Supports simple wildcards. 1.* => 1.0, 1.2, up to but not including 2.0.
            Wildcards such as 1.*.3 are not supported.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreSdkInstalledCondition.IsNetCoreSdk22(MonoDevelop.DotNetCore.DotNetCoreVersion)">
            <summary>
            2.2 is the lowest version that supports .NET Core 2.2 projects.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreSdkInstalledCondition.IsNetCoreSdk21(MonoDevelop.DotNetCore.DotNetCoreVersion)">
            <summary>
            2.1.300 is the lowest version that supports .NET Core 2.1 projects.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreSdkInstalledCondition.IsNetCoreSdk20(MonoDevelop.DotNetCore.DotNetCoreVersion)">
            <summary>
            2.1.300 is the lowest version that supports .NET Core 2.1 projects.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreSdkInstalledCondition.RequiresRuntime(Mono.Addins.NodeElement)">
            <summary>
            .NET Standard library projects do not require the .NET Core runtime.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreSdk.IsSupported(MonoDevelop.Core.Assemblies.TargetFramework)">
            <summary>
            Checks that the target framework (e.g. .NETCoreApp1.1 or .NETStandard2.0) is supported
            by the installed SDKs. Takes into account Mono having .NET Core v1 SDKs installed.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreSdk.IsSupported(MonoDevelop.Core.Assemblies.TargetFrameworkMoniker,MonoDevelop.DotNetCore.DotNetCoreVersion[],System.Boolean)">
            <summary>
            Used by unit tests.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreSdk.IsSupported(MonoDevelop.Core.Assemblies.TargetFrameworkMoniker,System.Version,MonoDevelop.DotNetCore.DotNetCoreVersion)">
             <summary>
             Project framework version is considered supported if the major version of the
             .NET Core SDK is greater or equal to the major version of the project framework.
             The fact that a .NET Core SDK is a preview version is ignored in this check.
            
             .NET Core SDK 1.0.4 supports .NET Core 1.0 and 1.1
             .NET Core SDK 1.0.4 supports .NET Standard 1.0 to 1.6
             .NET Core SDK 2.0 supports .NET Core 1.0, 1.1 and 2.0
             .NET Core SDK 2.0 supports .NET Standard 1.0 to 1.6 and 2.0
             .NET Core SDK 2.1.x (x &lt; 300) supports .NET Core 1.0, 1.1 and 2.0
             .NET Core SDK 2.1.x (x &lt; 300) supports .NET Standard 1.0 to 1.6 and 2.0
             .NET Core 2.1.300 supports .NET Core 1.0, 1.1, 2.0 and 2.1
             .NET Core 2.1.300 supports .NET Standard 1.0 to 1.6, and 2.0, 2.1
             </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreSdk.SupportsNetCore21(MonoDevelop.DotNetCore.DotNetCoreVersion)">
            <summary>
            .NET Core 2.1.300 SDK is the lowest version that supports .NET Core App 2.1
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreSdk.SetFSharpShims">
            <summary>
            This is a workaround to allow F# .NET Core 2.0 projects to be evaluated properly and compile
            without any errors. The better solution would be to ship the new Microsoft.FSharp.NetSdk.props
            and .targets files with Mono so this workaround can be removed. Setting the FSharpPropsShim
            and FSharpTargetsShim as environment variables allows the correct MSBuild imports to be used
            when building and evaluating. Just setting a global MSBuild property would fix the Build target
            not being found but the MSBuild project evaluation would not add the FSharp.Core PackageReference
            to the project.assets.json file, also all .fs files were treated as None items instead of
            Compile items.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreSdk.SetVersions(System.Collections.Generic.IEnumerable{MonoDevelop.DotNetCore.DotNetCoreVersion})">
            <summary>
            Used by unit tests to fake having different .NET Core sdks installed.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreSdk.SetInstalled(System.Boolean)">
            <summary>
            Used by unit tests to fake having the sdk installed.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreSdk.SetSdkRootPath(System.String)">
            <summary>
            Used by unit tests to fake having the sdk installed.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreRuntime.SetVersions(System.Collections.Generic.IEnumerable{MonoDevelop.DotNetCore.DotNetCoreVersion})">
            <summary>
            Used by unit tests to fake having different .NET Core sdks installed.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreRuntime.SetInstalled(System.Boolean)">
            <summary>
            Used by unit tests to fake having the sdk installed.
            </summary>
        </member>
        <member name="T:MonoDevelop.DotNetCore.MSBuildSdks">
            <summary>
            .NET Core SDKs that ship with MSBuild.
            </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreVersion.Parse(System.String)">
            <summary>
            Stable runtime version: 1.0.3
            Pre-release runtime version: 2.0.0-preview2-002093-00
            </summary>
        </member>
        <member name="T:MonoDevelop.DotNetCore.MSBuildSdksPathGlobalPropertyProvider">
             <summary>
             Defines the MSBuildSDKsPath global property which is used by the Microsoft.NET.Sdk.Web
             MSBuild targets when importing the core Sdk.props. This property is not needed for
             .NET Core 1.0.4 SDK or above. The Microsoft.NET.Sdk.Web MSBuild targets in .NET Core
             1.0.4 SDK do not use the MSBuildSDKsPath property when importing other targets but
             older SDKs do.
            
             If the installed .NET Core SDK is older than 1.0.4 then the MSBuildSDKsPath global
             property is set. If the .NET Core SDK is not installed then the MSBuildSDKsPath
             global property is set if the .NET Core SDKs are shipped with Mono. The
             Microsoft.NET.Sdk.Web MSBuild targets that ship with Mono are from an older .NET
             Core SDK version which uses the MSBuildSDKsPath property to import other targets.
             </summary>
        </member>
        <member name="M:MonoDevelop.DotNetCore.DotNetCoreShortTargetFramework.Parse(System.String)">
            <summary>
            Parse the specified short target framework. Logic is based on:
            https://github.com/dotnet/sdk/blob/cfe8ff3c4e51c473ae75ca32d1c7a62043e96990/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.TargetFrameworkInference.targets#L50
            </summary>
        </member>
    </members>
</doc>
