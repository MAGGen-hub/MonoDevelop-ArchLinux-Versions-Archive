<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoDevelop.DesignerSupport</name>
    </assembly>
    <members>
        <member name="M:MonoDevelop.DesignerSupport.Toolbox.ToolboxItemToolboxLoader.GetNode(System.Type,System.ComponentModel.ToolboxItemAttribute,System.String,System.String,MonoDevelop.Core.ClrVersion)">
            <param name="type">The <see cref="T:System.Type"/> of the item for which a node should be created.</param>
            <param name="attribute">The <see cref="T:System.ComponentModel.ToolboxItemAttribute"/> that was applied to the type.</param>
            <param name="attributeCategory"> The node's category as detected from the <see cref="T:System.ComponentModel.CategoryAttribute"/>. 
            If it's null or empty, the method will need to infer a value.</param>
            <param name="assemblyPath"> If the assembly is a system package, this value will be null. Else, the method will 
            need to record the full path in the node.</param>
        </member>
        <member name="T:MonoDevelop.DesignerSupport.Toolbox.ToolboxExtensions">
            <summary>
            Helpers for working with toolbox interfaces
            </summary>
        </member>
        <member name="M:MonoDevelop.DesignerSupport.Toolbox.ToolboxExtensions.GetContent``1(MonoDevelop.DesignerSupport.Toolbox.IToolboxConsumer)">
            <summary>
            If the consumer is a ViewContent, get content from it by type
            </summary>
        </member>
        <member name="M:MonoDevelop.DesignerSupport.Toolbox.ToolboxExtensions.GetDocument(MonoDevelop.DesignerSupport.Toolbox.IToolboxConsumer)">
            <summary>
            If the consumer is a ViewContent, returns its parent Document
            </summary>
        </member>
        <member name="M:MonoDevelop.DesignerSupport.Toolbox.ToolboxExtensions.IsTextEditor(MonoDevelop.DesignerSupport.Toolbox.IToolboxConsumer,MonoDevelop.Ide.Editor.TextEditor@)">
            <summary>
            Returns true if the consumer is a text editor and can handle text toolbox nodes
            </summary>
        </member>
        <member name="T:MonoDevelop.DesignerSupport.IPropertyProvider">
            <summary>
            Property providers can be used to create "proxy" objects which provide editable
            properties for a given object. When the designer support service finds a IPropertyPadProvider
            implementation, it gets the selected object from that pad provider, and then checks all
            registered property providers, looking one which supports the object. If it is found, it
            calls CreateProvider and the returned object will be given to the property pad.
            </summary>
        </member>
        <member name="T:MonoDevelop.DesignerSupport.IPropertyPadCustomizer">
            <summary>
            Implement this interface if you need to customize the property grid
            </summary>
        </member>
        <member name="M:MonoDevelop.DesignerSupport.IPropertyPadCustomizer.Customize(MonoDevelop.Ide.Gui.IPadWindow,MonoDevelop.Components.PropertyGrid.PropertyGrid)">
            <summary>
            Called to customize the property pad. This method is called even
            when using a custom property pad provided by ICustomPropertyPadProvider,
            in which case propertyGrid is set to null.
            </summary>
            <param name='padWindow'>
            Pad window.
            </param>
            <param name='propertyGrid'>
            Property grid. It will be null when using a custom property pad.
            </param>
        </member>
    </members>
</doc>
