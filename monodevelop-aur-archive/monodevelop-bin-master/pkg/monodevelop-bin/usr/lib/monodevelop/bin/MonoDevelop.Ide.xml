<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoDevelop.Ide</name>
    </assembly>
    <members>
        <member name="F:MonoDevelop.Ide.Commands.EditCommands.DeleteKey">
            <summary>
            The DeleteKey command can be used to easily bind the Delete key to a command handler
            Notice that the EditCommands.Delete command is not bound to the Delete key since it is not always
            convenient to fire the Delete command when pressing Delete (for example, while editing the name of
            a file in the solution pad.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Commands.FileCommands">
            <summary>
            Copied from MonoDevelop.Ide.addin.xml
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Commands.HelpCommands">
            <summary>
            Copied from MonoDevelop.Ide.addin.xml
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Composition.CompositionManager">
            <summary>
            The host of the MonoDevelop MEF composition. Uses https://github.com/Microsoft/vs-mef.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Composition.CompositionManager.InitializeAsync">
            <summary>
            Starts initializing the MEF composition on a background thread. Thread-safe.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Composition.CompositionManager.GetExportedValue``1">
            <summary>
            Returns an instance of type T that is exported by some composition part. The instance is shared (singleton).
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Composition.CompositionManager.GetExportedValues``1">
            <summary>
            Returns all instances of type T that are exported by some composition part. The instances are shared (singletons).
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Composition.CompositionManager.GetExport``1">
            <summary>
            Returns a lazy holding the instance of type T that is exported by some composition part. The instance is shared (singleton).
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Composition.CompositionManager.GetExports``1">
            <summary>
            Returns a lazy holding all instances of type T that are exported by some composition part. The instances are shared (singletons).
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Composition.CompositionManager.ICachingFaultInjector">
            <summary>
            Used by tests to inject changes into the cache data in memory so it asserts whether caching can be used.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Composition.CompositionManager.Caching">
            <summary>
            Class used to validate whether a MEF cache is re-usable for a given set of assemblies.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.BaseViewContent.Project">
            <summary>
            Gets or sets the project bound to the view
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.BaseViewContent.OnSetProject(MonoDevelop.Projects.Project)">
            <summary>
            Called to update the project bound to the view.
            </summary>
            <param name="project">
            New project assigned to the view. It can be null.
            </param>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.BaseViewContent.ProjectReloadCapability">
            <summary>
            Gets the capability of this view for being reassigned a project
            </summary>
            <value>The project reload capability.</value>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.BaseViewContent.Binding">
            <summary>
            Gets the display binding of this view.
            </summary>
            <value>The display binding used to create this view.</value>
        </member>
        <member name="F:MonoDevelop.Ide.Gui.ProjectReloadCapability.UnsavedData">
            <summary>
            It can keep unsaved data. Some status (such as undo queue) may be lost.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Gui.ProjectReloadCapability.Full">
            <summary>
            It can keep unsaved data and status.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.IWorkbenchWindow.GetToolbar(MonoDevelop.Ide.Gui.BaseViewContent)">
            <summary>
            Returns a toolbar for the pad.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Gui.Content.PrintingSettings">
            <summary>
            Encapsulates printer settings shared by IPrintables. IPrintables may alter it if the user changes 
            and applies settings in the Print dialog.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.Content.PrintingSettings.PrintSettings">
            <summary>May be null</summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.Content.PrintingSettings.PageSetup">
            <summary>May be null</summary>
        </member>
        <member name="T:MonoDevelop.Ide.Gui.Content.ILocationList">
            <summary>
            This interface can be implemented to provide a list of locations through which the
            user can browse with F4. To set the active list, set IdeApp.Workbench.ActiveLocationList
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.Content.ILocationList.ItemName">
            <summary>
            Return the name of items that this list enumerates. For example 'error' or 'search result'
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Content.ILocationList.GetNextLocation">
            <summary>
            Returns the next location in the list. Null if there are no more locations.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Content.ILocationList.GetPreviousLocation">
            <summary>
            Returns the previous location in the list. Null if there are no more locations.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Gui.Dialogs.OpenFileDialog">
            <summary>
            Dialog which allows selecting a file to be opened or saved
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.Dialogs.OpenFileDialog.ShowEncodingSelector">
            <summary>
            Set to true if the encoding selector has to be shown
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.Dialogs.OpenFileDialog.ShowViewerSelector">
            <summary>
            Set to true if the viewer selector has to be shown
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.Dialogs.OpenFileDialog.Encoding">
            <summary>
            Selected encoding.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.Dialogs.OpenFileDialog.CloseCurrentWorkspace">
            <summary>
            Set to true if the workspace has to be closed before opening a solution.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.Dialogs.OpenFileDialog.SelectedViewer">
            <summary>
            Selected viewer.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Dialogs.OptionsDialog.GetPanel``1(System.String)">
            <summary>
            Gets a specific dialog panel from a given section.
            </summary>
            <returns>The panel, or null if the panel wasn't found.</returns>
            <param name="id">The section id.</param>
            <typeparam name="T">The type of the dialog panel.</typeparam>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Dialogs.MimeTypePolicyOptionsPanel`1.GetCurrentOtherPolicy``1">
            <summary>
            Gets the current policy from the same section.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Gui.Dialogs.GtkAlertDialog">
            <summary>
            A Gnome HIG compliant alert dialog.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Gui.OptionPanels.LoadSavePanel">
            <summary>
            Summary description for Form1.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Gui.OptionPanels.SdkLocationPanel">
            <summary>
            Panel that allows the user to specify the location of an SDK.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.OptionPanels.SdkLocationPanel.Label">
            <summary>
            The panel's header label.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.OptionPanels.SdkLocationPanel.DefaultSdkLocations">
            <summary>
            The default SDK locations that will be searched if the value is blank.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.OptionPanels.SdkLocationPanel.RequiresRestart">
            <summary>
            Checks whether or not a restart is needed when the SDK location is changed.
            </summary>
            <value><c>true</c> if a change requires a restart; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.OptionPanels.SdkLocationPanel.ValidateSdkLocation(MonoDevelop.Core.FilePath)">
            <summary>
            Check whether the SDK exists at a location.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.OptionPanels.SdkLocationPanel.LoadSdkLocationSetting">
            <summary>
            Loads the SDK location setting. A null value means that the default should be used.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.OptionPanels.SdkLocationPanel.SaveSdkLocationSetting(MonoDevelop.Core.FilePath)">
            <summary>
            Saves the SDK location setting. A null value means that the default should be used.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Pads.ProjectPad.FolderCommandHandler.AddFilesFromFolder">
            <summary>Imports files and folders from a target folder into the current folder</summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Pads.ProjectPad.FolderCommandHandler.AddExistingFolder">
            <summary>Adds an existing folder to the current folder</summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Pads.ProjectPad.ProjectFileNodeCommandHandler.GetDependentFilesToRename(MonoDevelop.Projects.ProjectFile,System.String)">
            <summary>
            Returns all dependent files that have names that start with the old name of the file.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Gui.Pads.TreeViewPad">
            <summary>
            This class implements a project browser.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Gui.DefaultWorkbench">
            <summary>
            This is the a Workspace with a multiple document interface.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.DefaultWorkbench.SetActiveWidget(Gtk.Widget)">
            <summary>
            Sets the current active document widget.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Gui.WorkbenchMemento">
            <summary>
            This class contains the state of the <code>MdiWorkspace</code>, it is used to 
            make the <code>MdiWorkspace</code> state persistent.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.WorkbenchMemento.#ctor(MonoDevelop.Core.Properties)">
            <summary>
            Creates a new instance of the <code>MdiWorkspaceMemento</code>.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.IPadWindow.Title">
            <summary>
            Title shown at the top of the pad, or at the tab label when in a notebook
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.IPadWindow.Icon">
            <summary>
            Title shown at the top of the pad, or at the tab label when in a notebook
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.IPadWindow.Visible">
            <summary>
            True if the pad is visible in the current layout (although it may be minimized when in autohide mode
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.IPadWindow.AutoHide">
            <summary>
            True when the pad is in autohide mode
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.IPadWindow.ContentVisible">
            <summary>
            The content of the pad is visible (that is, if the pad is active in the notebook on which it is
            docked, and it is not minimized.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.IPadWindow.Sticky">
            <summary>
            When set to True, the pad will be visible in all layouts
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.IPadWindow.IsWorking">
            <summary>
            When set to True, it flags the pad as "Work in progress". The pad's title will be shown in blue.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.IPadWindow.HasErrors">
            <summary>
            When set to True, it flags the pad as "Has errors". The pad's title will be shown in red. This flag
            will be automatically reset when the pad is made visible.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.IPadWindow.HasNewData">
            <summary>
            When set to True, it flags the pad as "Has New Data". The pad's title will be shown in bold. This flag
            will be automatically reset when the pad is made visible.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.IPadWindow.Content">
            <summary>
            Interface providing the content widget
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.IPadWindow.GetToolbar(MonoDevelop.Components.Docking.DockPositionType)">
            <summary>
            Returns a toolbar for the pad.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.IPadWindow.Activate(System.Boolean)">
            <summary>
            Brings the pad to the front.
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.Gui.IPadWindow.PadShown">
            <summary>
            Fired when the pad is shown in the current layout (although it may be minimized)
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.Gui.IPadWindow.PadHidden">
            <summary>
            Fired when the pad is hidden in the current layout
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.Gui.IPadWindow.PadContentShown">
            <summary>
            Fired when the content of the pad is shown
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.Gui.IPadWindow.PadContentHidden">
            <summary>
            Fired when the content of the pad is hidden
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.Gui.IPadWindow.PadDestroyed">
            <summary>
            Fired when the pad is destroyed
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.Document.AnalysisDocument">
            <summary>
            Returns the roslyn document for this document. This may return <c>null</c> if it's no compileable document.
            Even if it's a C# file.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Document.OnActiveViewContentChanged(System.Object,System.EventArgs)">
            * TODO: Implement better task update algorithm.
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Document.RunWhenLoaded(System.Action)">
            <summary>
            Performs an action when the content is loaded.
            </summary>
            <param name='action'>
            The action to run.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Document.UpdateParseDocument">
            <summary>
            This method can take some time to finish. It's not threaded
            </summary>
            <returns>
            A <see cref="P:MonoDevelop.Ide.Gui.Document.ParsedDocument"/> that contains the current dom.
            </returns>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.Document.IsInProjectSettingLoadingProcess">
            <summary>
            During that process ad hoc projects shouldn't be created.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Document.ReparseDocument">
            <summary>
            This method kicks off an async document parser and should be used instead of 
            <see cref="M:MonoDevelop.Ide.Gui.Document.UpdateParseDocument"/> unless you need the parsed document immediately.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Document.DisableAutoScroll">
            <summary>
            If the document shouldn't restore the settings after the load it can be disabled with this method.
            That is useful when opening a document and programmatically scrolling to a specified location.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Gui.Workbench">
            <summary>
            This is the basic interface to the workspace.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.Workbench.DocumentsDirty">
            <summary>
            This is a wrapper for use with AutoTest
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.Workbench.AutoReloadDocuments">
            <summary>
            When set to <c>true</c>, opened documents will automatically be reloaded when a change in the underlying
            file is detected (unless the document has unsaved changes)
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.Workbench.HasToplevelFocus">
            <summary>
            Whether the root window or any undocked part of it has toplevel focus. 
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.FileOpenInformation.IsReloadOperation">
            <summary>
            Is true when the file is already open and reload is requested.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.StartupInfo.OpenedRecentProject">
            <summary>
            Set to true if a project was opened on startup.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.StartupInfo.OpenedFiles">
            <summary>
            Set to true if files were opened on startup.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Gui.StartupInfo.FileExpression">
            <summary>
            Matches a filename string with optional line and column 
            (/foo/bar/blah.cs;22;31)
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.ProgressMonitorManager.GetPadForMonitor(MonoDevelop.Core.ProgressMonitor)">
            <summary>
            Gets the pad that is showing the output of a progress monitor
            </summary>
            <param name='monitor'>
            The monitor.
            </param>
            <remarks>
            For example, if you have a monitor 'm' created with a call to GetOutputProgressMonitor,
            GetPadForMonitor (m) will return the output pad.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.ExtensibleTreeView.StartLabelEdit">
            <summary>
            If you want to edit a node label. Select the node you want to edit and then
            call this method, instead of using the LabelEdit Property and the BeginEdit
            Method directly.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.ExtensibleTreeView.ClearSelectOnRelease">
            <summary>
            Forces the select on release feature to be disabled since the ContextMenuTreeView
            does not always reset the SelectFunction for the tree.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.NodeHashtable.RegisterByRefType(System.Type)">
            <summary>
            Sets that the objects of the specified type have to be compared
            using object reference equality
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.ITreeNavigator.ScrollToNode">
            <summary>
            Scrolls the tree to this node.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Gui.Components.NodeBuilder.DefaultSort">
            <summary>
            Return this constant in CompareToObject to instruct the tree view to
            use the default sorting rules for the compared objects.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.NodeBuilder.CompareObjects(MonoDevelop.Ide.Gui.Components.ITreeNavigator,MonoDevelop.Ide.Gui.Components.ITreeNavigator)">
            <summary>
            Compares two nodes. Used when sorting the nodes in the tree.
            </summary>
            <returns>
            A value &lt; 0 if thisNode is less than otherNode, 0 if equal, 1 if greater, <c>DefaultSort</c>
            if the default sort order has to be used.
            </returns>
            <param name='thisNode'>
            A node handled by this builder
            </param>
            <param name='otherNode'>
            Another node (which may not be handled by this builder)
            </param>
            <remarks>
            This method is used by ExtensibleTreeView to sort nodes. <c>thisNode</c> always points to a node
            which is handled by this builder, but <c>otherNode</c> can be any node, handled or not by this builder.
            The value <c>DefaultSort</c> can be returned to instruct that no order can be decided in this node, and
            that the default ordering should be used (by default, node names are compared)
            </remarks>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.NodeBuilder.GetSortIndex(MonoDevelop.Ide.Gui.Components.ITreeNavigator)">
            <summary>
            Gets the sort index for this node
            </summary>
            <returns>The sort index.</returns>
            <param name="node">A tree node.</param>
            <remarks>
            The sort index is used to determine the relative ordering of nodes. Nodes with a higher sort index are
            placed after nodes with lower index. When the index of two nodes is the same, the CompareObjects
            method is used to determine the ordering. The default value is 0.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.Components.TypeNodeBuilder.UseReferenceEquality">
            <summary>
            Gets a value indicating whether reference equality should be used to compare objects of this type
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Gui.Components.LogView.Cookie">
            <summary>
            Incremented any time the pad is cleared, so callers can know when they should stop using it
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Gui.Components.LogView.LogTextView">
            <summary>
            The log text view allows the user to jump to the source of an error/warning
            by double clicking on the line in the text view.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.Components.ProjectFileEntry.VerifyFileExistsInProject">
            <summary>Makes SelectedFile return Null if the file does not exist in the project.</summary>
        </member>
        <member name="T:MonoDevelop.Ide.Gui.Components.PriorityList">
            <summary>
            Provides a list of items that can be reordered by pressing
            up and down buttons.
            </summary>
            <remarks>
            Uses a Gtk.ListStore as underlying model. Button sensitivity
            state is updated according to the selected item. For instance the
            last item in the list can not be moved further downward. Consequently the
            down button will be greyed out.
            This is based on the original DebuggerOptionsPanelWidget priority list
            design and code. We expose it here for reuse in other GUIs.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.Components.PriorityList.Model">
            <remarks>
            The priority list listens for changes in this model and
            updates the up and down button greyed out states whenever
            rows are inserted, deleted or reordered.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.PriorityList.#ctor">
            <remarks>
            Registers a selection handler that updates up and down button states
            depending on the current selected item.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.PriorityList.UpdatePriorityButtons">
            <summary>
            Updates the greyed out state of the up and down buttons
            depending on the currently selected item.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.PriorityList.AppendColumn(Gtk.TreeViewColumn)">
            <seealso cref="T:Gtk.TreeView"/>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.PriorityList.AppendColumn(System.String,Gtk.CellRenderer,Gtk.CellLayoutDataFunc)">
            <seealso cref="T:Gtk.TreeView"/>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.PriorityList.AppendColumn(System.String,Gtk.CellRenderer,Gtk.TreeCellDataFunc)">
            <seealso cref="T:Gtk.TreeView"/>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.PriorityList.AppendColumn(System.String,Gtk.CellRenderer,System.Object[])">
            <seealso cref="T:Gtk.TreeView"/>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.PriorityList.HandleSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            Updates the button greyed out states whenever the selection changes.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.PriorityList.HandleRowInserted(System.Object,Gtk.RowInsertedArgs)">
            <summary>
            Updates the button greyed out states whenever an item is inserted.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.PriorityList.HandleRowDeleted(System.Object,Gtk.RowDeletedArgs)">
            <summary>
            Updates the button greyed out states whenever an item is deleted.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.PriorityList.HandleRowsReordered(System.Object,Gtk.RowsReorderedArgs)">
            <summary>
            Updates the button greyed out states whenever items are reordered.
            </summary>
            <remarks>
            This is required for ListStore.Swap ().
            </remarks>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.PriorityList.OnButtonUpClicked(System.Object,System.EventArgs)">
            <summary>
            Moves the selected item up if possible.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.Components.PriorityList.OnButtonDownClicked(System.Object,System.EventArgs)">
            <summary>
            Moves the selected item down if possible.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Gui.IDisplayBinding.CanHandle(MonoDevelop.Core.FilePath,System.String,MonoDevelop.Projects.Project)">
            <summary>
            Whether this instance can handle the specified item. ownerProject may be null, and either 
            fileName or mimeType may be null, but not both.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Gui.IDisplayBinding.CanUseAsDefault">
            <summary>
            Whether the display binding can be used as the default handler for the content types
            that it handles. If this is false, the binding is only used when the user explicitly picks it.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Gui.IViewDisplayBinding">
            <summary>A display binding that opens a new view within the workspace.</summary>
        </member>
        <member name="T:MonoDevelop.Ide.Gui.IExternalDisplayBinding">
            <summary>A display binding that opens an external application.</summary>
        </member>
        <member name="T:MonoDevelop.Ide.Gui.IAttachableDisplayBinding">
            <summary>A display binding that attaches to an existing view in the workspace.</summary>
        </member>
        <member name="T:MonoDevelop.Ide.Gui.StartupAssetType">
            <summary>
            Indicates whether a document or solution was opened on starting the IDE.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Projects.ProjectOptionsDialog">
            <summary>
            Dialog for viewing the project options.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Projects.NewFileDialog">
            <summary>
             This class is for creating a new "empty" file
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Projects.NewFileDialog.TemplateItem">
            <summary>
             Represents a new file template
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Projects.AddFileDialog">
            <summary>
            Dialog which allows selecting files to be added to a project
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Projects.AddFileDialog.BuildActions">
            <summary>
            Build actions from which the user can select the one to apply to the new file.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Projects.AddFileDialog.OverrideAction">
            <summary>
            Selected build action.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Projects.ProjectFileSelectorDialog.SelectedFile">
            <summary>
            Remains valid after the dialog has been destroyed
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Projects.PoliciesListSummaryTree.Message">
            <summary>
            Message to be shown if there are no policies.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Projects.NewProjectDialogController">
            <summary>
            To be renamed to NewProjectDialog
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Projects.NewProjectDialogController.GetConditionalTemplateForProcessing">
            <summary>
            Looks at the SelectedTemplate first to find a template that should be conditionally
            used. If there is no match then all templates in the same category that have the
            same template id are checked. This allows multiple templates with the same id in the
            same category to be supported. .NET Core 2.0 and .NET Core 1.0 project templates
            currently use the same template id so only one item is shown in the recently used
            items list but use different templates.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Projects.NewProjectDialogController.SetFirstBuildProperty(System.Collections.Generic.IEnumerable{MonoDevelop.Projects.IWorkspaceFileObject})">
            <summary>
            Sets the FirstBuild user property to true for a new project. This will
            be removed when the first build of the project is run.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Projects.NewProjectDialogController.SanitisePotentialNamespace(System.String)">
            <summary>
            Taken from DotNetProject. This is needed otherwise an invalid namespace
            can still be used if digits are used as the start of the project name
            (e.g. '2try').
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Projects.GtkNewProjectDialogBackend.OnSizeRequested(Gtk.Requisition@)">
            <summary>
            When the dialog has Resizable set to false then the DefaultHeight and
            DefaultWidth are ignored and the size for the dialog changes to fit the
            widgets which will sometimes shrink the dialog. The size also changes
            on moving from page to page so override the requisition if it is too small.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Tasks.TaskService.ShowStatus(MonoDevelop.Ide.Tasks.TaskListEntry)">
            <summary>
            Shows a description of the task in the status bar
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Tasks.TaskStore.IsProjectTaskFile(MonoDevelop.Ide.Tasks.TaskListEntry)">
            <summary>
            Determines whether the task's file should be opened automatically when jumping to the next error.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Codons.PadCodon.DefaultPlacement">
            <summary>
            Returns the default placement of the pad: left, right, top, bottom.
            Relative positions can be used, for example: "ProjectPad/left"
            would show the pad at the left of the project pad. When using
            relative placements several positions can be provided. If the
            pad can be placed in the first position, the next one will be
            tried. For example "ProjectPad/left; bottom".
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.CodeTemplates.CodeTemplate.InsertTemplateContents(MonoDevelop.Ide.Editor.TextEditor,MonoDevelop.Ide.Editor.DocumentContext)">
            <summary>
            Don't use this unless you're implementing ICodeTemplateWidget. Use Insert instead.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Templates.FileTemplate.Localize(Mono.Addins.RuntimeAddin,System.String)">
            <summary>
            The addin may be null if the file template is loaded by a unit test.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Templates.ProjectTemplate.nonLocalizedName">
            <summary>
            The name of the template before localization, used for the instantiation counter
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Templates.SingleFileDescriptionTemplate.SaveFileAsync(MonoDevelop.Projects.SolutionFolderItem,MonoDevelop.Projects.Project,System.String,System.String,System.String)">
            <summary>
            Creates a file and saves it to disk. All parameters are optional (can be null)
            </summary>
            <returns>The path to the new file.</returns>
        </member>
        <member name="M:MonoDevelop.Ide.Templates.SingleFileDescriptionTemplate.CreateFileContentFromDerivedClass(MonoDevelop.Projects.SolutionFolderItem,MonoDevelop.Projects.Project,System.String,System.String,System.String)">
            <summary>
            Allows a derived class's CreateFileContent to be called. Need to ensure that if the derived
            class does not implement CreateFileContent then the SingleFileDescriptionTemplate's
            CreateFileContentAsync is used instead of CreateFileContent.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Templates.SolutionItemDescriptor">
            <summary>
            This class is used inside the combine templates for projects.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Templates.ProjectTemplatePackageReference.GetLocalOrParentAttribute(System.Xml.XmlElement,System.String)">
            <summary>
            Local attribute value overrides parent attribute value.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Templates.SolutionTemplate.GroupId">
            <summary>
            Allows templates to be grouped together in the New Project dialog.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Templates.SolutionTemplate.Condition">
            <summary>
            Allows a template to be selected conditionally.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Templates.SolutionTemplate.GetGroupedTemplates">
            <summary>
            Returns all other templates in the group. Does not include this template.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Templates.RecentTemplates.RemoveTemplateFromSameGroup(MonoDevelop.Ide.Templates.SolutionTemplate)">
            <summary>
            Removes any recent templates from the same group if it has the same language.
            Different languages for the same group can exist separately in the recent project
            templates list.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Templates.ProjectTemplateCategorizer.CategorizeTemplates(System.Collections.Generic.IEnumerable{MonoDevelop.Ide.Templates.SolutionTemplate})">
            <summary>
            The template's existing groups are cleared before being categorized.
            This allows the templating provider to cache the templates and prevents
            the list of groups associated with the template from increasing every
            time the New Project dialog is opened.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Templates.MicrosoftTemplateEngineProjectTemplatingProvider.CreateTemplate(System.String,System.String)">
            <summary>
            Used by unit tests to create a new solution template without having to use an addin.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Templates.MicrosoftTemplateEngineSolutionTemplate.ParseDescription(System.String)">
            <summary>
            Replaces \n in description with new lines unless escaped with an extra backslash.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Templates.MicrosoftTemplateEngine.CreateProjectTemplate(System.String,System.String)">
            <summary>
            Used by unit tests to create a new solution template without having to use an addin.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Templates.MicrosoftTemplateEngine.GetStream(Microsoft.TemplateEngine.Abstractions.ITemplateInfo,System.String)">
            <summary>
            Use '${TemplateConfigDirectory}/template.json' to get the template.json file
            without having to specify the full path.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.IMonoDevelopHostDocument.UpdateText(Microsoft.CodeAnalysis.Text.SourceText)">
            <summary>
            Updates the text of the document.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.TypeSystemService.GetCacheDirectory(MonoDevelop.Projects.Project,System.Boolean)">
            <summary>
            Gets the cache directory for a projects derived data cache directory.
            If forceCreation is set to false the method may return null, if the cache doesn't exist.
            </summary>
            <returns>The cache directory.</returns>
            <param name="project">The project to get the cache for.</param>
            <param name="forceCreation">If set to <c>true</c> the creation is forced and the method doesn't return null.</param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.TypeSystemService.GetCacheDirectory(System.String,System.Boolean)">
            <summary>
            Gets the cache directory for arbitrary file names.
            If forceCreation is set to false the method may return null, if the cache doesn't exist.
            </summary>
            <returns>The cache directory.</returns>
            <param name="fileName">The file name to get the cache for.</param>
            <param name="forceCreation">If set to <c>true</c> the creation is forced and the method doesn't return null.</param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.TypeSystemService.GetStableHashCode(System.String)">
            <summary>
            Retrieves a hash code for the specified string that is stable across
            .NET upgrades.
            
            Use this method instead of the normal <c>string.GetHashCode</c> if the hash code
            is persisted to disk.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.TypeSystemService.CleanupCache">
            <summary>
            Removes all cache directories which are older than 30 days.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.TypeSystemService.AddOutputTrackingNode(MonoDevelop.Ide.TypeSystem.TypeSystemOutputTrackingNode)">
            <summary>
            Adds an output tracking node for unit testing purposes.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.TypeSystem.Ambience.NameFormat">
            <summary>
            Standard format for displaying to the user.
            </summary>
            <remarks>
            No return type.
            </remarks>
        </member>
        <member name="F:MonoDevelop.Ide.TypeSystem.ParsedDocumentFlags.SkipFoldings">
            <summary>
            Used for files where a custom folding extension is taken.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.TypeSystem.ParsedDocumentFlags.HasCustomCompletionExtension">
            <summary>
            Used for files that have a custom completion extension.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.TypeSystem.ParsedDocument.IsInvalid">
            <summary>
            Gets or sets a value indicating whether this instance is invalid and needs to be reparsed.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.TypeSystem.ParsedDocument.Ast">
            <summary>
            Gets or sets the language ast used by specific language backends.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.TypeSystem.TypeSystemParser">
            <summary>
            A type system parser provides a ParsedDocument (which just adds some more information to a IUnresolvedFile) for
            a given file. This is required for adding information to the type system service to make the file contents available
            for type lookup (code completion, resolving etc.).
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.TypeSystemParser.Parse(MonoDevelop.Ide.TypeSystem.ParseOptions,System.Threading.CancellationToken)">
            <summary>
            Parse the specified file. The file content is provided as text reader.
            </summary>
            <param name='options'>
            The parse options.
            </param>
            <param name='cancellationToken'>
            The cancellation token to cancel the parsing task.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.TypeSystemParser.CanGenerateProjection(System.String,System.String,System.String[])">
            <summary>
            If true projections are possible. A projection transforms a source to a target language and maps certain parts of the file to parts in the projected file.
            That's used for embedded languages for example.
            </summary>
            <returns><c>true</c> if this instance can generate projection the specified mimeType buildAction supportedLanguages;
            otherwise, <c>false</c>.</returns>
            <param name="mimeType">MIME type.</param>
            <param name="buildAction">Build action.</param>
            <param name="supportedLanguages">Supported languages.</param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.TypeSystemParser.GenerateProjections(MonoDevelop.Ide.TypeSystem.ParseOptions,System.Threading.CancellationToken)">
            <summary>
            Generates the plain projection. This is used for type system services.
            </summary>
            <returns>The projection.</returns>
            <param name="options">Options.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.TypeSystemParser.GenerateParsedDocumentProjection(MonoDevelop.Ide.TypeSystem.ParseOptions,System.Threading.CancellationToken)">
            <summary>
            Generates the parsed document projection. That contains the parsed document and the projection. This is used inside the IDE for the editor.
            That's usually more efficient than calling Parse/GenerateProjection separately.
            </summary>
            <returns>The parsed document projection.</returns>
            <param name="options">Options.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.TypeSystemParser.GetPartialProjectionsAsync(MonoDevelop.Ide.Editor.DocumentContext,MonoDevelop.Ide.Editor.TextEditor,MonoDevelop.Ide.TypeSystem.ParsedDocument,System.Threading.CancellationToken)">
            <summary>
            Gets an up to date partial projection used by code completion.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.MonoDevelopWorkspace.OpenSolutionInfo(Microsoft.CodeAnalysis.SolutionInfo)">
            <summary>
            This bypasses the type system service. Use with care.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.TypeSystem.MonoDevelopWorkspace.ProjectSaveTask">
            <summary>
            Used by tests to validate that project has been saved.
            </summary>
            <value>The task that can be awaited to validate saving has finished.</value>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.MonoDevelopWorkspace.ProjectionData.TryGetOriginalFileFromProjection(System.String,System.Int32,System.String@,System.Int32@)">
            <summary>
            Tries the get original file from projection. If the fileName / offset is inside a projection this method tries to convert it 
            back to the original physical file.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.MonoDevelopWorkspace.TryGetOriginalFileFromProjection(System.String,System.Int32,System.String@,System.Int32@)">
            <summary>
            Tries the get original file from projection. If the fileName / offset is inside a projection this method tries to convert it 
            back to the original physical file.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.MonoDevelopWorkspace.ProjectSystemHandler.ReloadModifiedProjects">
            <summary>
            This takes the modified projects that occurred during the solution load and re-plays
            the modifications to the workspace as though they occurred after the load so any updated
            references due to a NuGet restore are made available to the type system.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.MonoDevelopWorkspace.ProjectSystemHandler.ReloadModifiedProject(MonoDevelop.Projects.Project)">
            <summary>
            This checks that the new project was modified whilst it was being added to the
            workspace and re-plays project modifications to the workspace as though they
            happened after the project was added. This ensures any updated references due to
            a NuGet restore are made available to the type system.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.TypeSystem.ErrorType">
            <summary>
            Enum that describes the type of an error.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.TypeSystem.Error">
            <summary>
            Descibes an error during parsing.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.TypeSystem.Error.ErrorType">
            <summary>
            The type of the error.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.TypeSystem.Error.Message">
            <summary>
            The error description.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.TypeSystem.Error.Id">
            <summary>
            The id of the error.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.TypeSystem.Error.Region">
            <summary>
            The region of the error.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.TypeSystem.Error.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.Error.#ctor(MonoDevelop.Ide.TypeSystem.ErrorType,System.String,MonoDevelop.Ide.Editor.DocumentRegion)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.NRefactory.TypeSystem.Error"/> class.
            </summary>
            <param name='errorType'>
            The error type.
            </param>
            <param name='message'>
            The description of the error.
            </param>
            <param name='region'>
            The region of the error.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.Error.#ctor(MonoDevelop.Ide.TypeSystem.ErrorType,System.String,MonoDevelop.Ide.Editor.DocumentLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.NRefactory.TypeSystem.Error"/> class.
            </summary>
            <param name='errorType'>
            The error type.
            </param>
            <param name='message'>
            The description of the error.
            </param>
            <param name='location'>
            The location of the error.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.Error.#ctor(MonoDevelop.Ide.TypeSystem.ErrorType,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.NRefactory.TypeSystem.Error"/> class.
            </summary>
            <param name='errorType'>
            The error type.
            </param>
            <param name='message'>
            The description of the error.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.Error.#ctor(MonoDevelop.Ide.TypeSystem.ErrorType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.NRefactory.TypeSystem.Error"/> class.
            </summary>
            <param name='errorType'>
            The error type.
            </param>
            <param name='message'>
            The description of the error.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.Error.#ctor(MonoDevelop.Ide.TypeSystem.ErrorType,System.String,System.String,MonoDevelop.Ide.Editor.DocumentRegion)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.NRefactory.TypeSystem.Error"/> class.
            </summary>
            <param name='errorType'>
            The error type.
            </param>
            <param name='message'>
            The description of the error.
            </param>
            <param name='region'>
            The region of the error.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.Error.#ctor(MonoDevelop.Ide.TypeSystem.ErrorType,System.String,System.String,MonoDevelop.Ide.Editor.DocumentLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.NRefactory.TypeSystem.Error"/> class.
            </summary>
            <param name='errorType'>
            The error type.
            </param>
            <param name='message'>
            The description of the error.
            </param>
            <param name='location'>
            The location of the error.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.Error.#ctor(MonoDevelop.Ide.TypeSystem.ErrorType,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.NRefactory.TypeSystem.Error"/> class.
            </summary>
            <param name='errorType'>
            The error type.
            </param>
            <param name='message'>
            The description of the error.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.Error.#ctor(MonoDevelop.Ide.TypeSystem.ErrorType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ICSharpCode.NRefactory.TypeSystem.Error"/> class.
            </summary>
            <param name='errorType'>
            The error type.
            </param>
            <param name='message'>
            The description of the error.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.MonoDevelopMetadataReferenceManager.GetMetadata(System.String,System.DateTime)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.BadImageFormatException" />
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.MonoDevelopMetadataReferenceManager.CreateAssemblyMetadataFromTemporaryStorage(Roslyn.Utilities.FileKey,System.Collections.Generic.List{Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage})">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.BadImageFormatException" />
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.MonoDevelopMetadataReferenceManager.CreateAssemblyMetadata(Roslyn.Utilities.FileKey,Microsoft.CodeAnalysis.ModuleMetadata,System.Collections.Generic.List{Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage},System.Func{Roslyn.Utilities.FileKey,System.Collections.Generic.List{Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage},Microsoft.CodeAnalysis.ModuleMetadata})">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.BadImageFormatException" />
        </member>
        <member name="T:MonoDevelop.Ide.TypeSystem.IFoldingParser">
            <summary>
            The folding parser is used for generating a preliminary parsed document that does not
            contain a full dom - only some basic lexical constructs like comments or pre processor directives.
            
            This is useful for opening a document the first time to have some folding regions as start that are folded by default.
            Otherwise an irritating screen update will occur.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.TypeSystem.AmbienceTooltipProvider">
            <summary>
            Provides tooltips for a roslyn symbol.
            Note: Intentionally part of internal extension API. 
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.NR5CompatibiltyExtensions.GetFullMetadataName(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Gets the full name of the metadata.
            In case symbol is not INamedTypeSymbol it returns raw MetadataName
            Example: Generic type returns T1, T2...
            </summary>
            <returns>The full metadata name.</returns>
            <param name="symbol">Symbol.</param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.NR5CompatibiltyExtensions.GetFullMetadataName(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Gets the full MetadataName(ReflectionName in NR5).
            Example: Namespace1.Namespace2.Classs1+NestedClassWithTwoGenericTypes`2+NestedClassWithoutGenerics
            </summary>
            <returns>The full metadata name.</returns>
            <param name="symbol">Symbol.</param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.NR5CompatibiltyExtensions.IsDerivedFromClass(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Determines if derived from baseType. Includes itself and all base classes, but does not include interfaces.
            </summary>
            <returns><c>true</c> if is derived from class the specified type baseType; otherwise, <c>false</c>.</returns>
            <param name="type">Type.</param>
            <param name="baseType">Base type.</param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.NR5CompatibiltyExtensions.GetFullName(Microsoft.CodeAnalysis.INamespaceSymbol)">
            <summary>
            Gets the full name of the namespace.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.NR5CompatibiltyExtensions.GetFullName(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Gets the full name. The full name is no 1:1 representation of a type it's missing generics and it has a poor
            representation for inner types (just dot separated).
            DO NOT use this method unless you're know what you do. It's only implemented for legacy code.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.NR5CompatibiltyExtensions.GetAllBaseClasses(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Boolean)">
            <summary>
            Gets all base classes.
            </summary>
            <returns>The all base classes.</returns>
            <param name="type">Type.</param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.NR5CompatibiltyExtensions.GetComponentCategory(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns the component category.
            [System.ComponentModel.CategoryAttribute (CATEGORY)]
            </summary>
            <param name="symbol">Symbol.</param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.NR5CompatibiltyExtensions.IsToolboxItem(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Returns true if the type is public and was tagged with
            [System.ComponentModel.ToolboxItem (true)]
            </summary>
            <returns><c>true</c> if is designer browsable the specified symbol; otherwise, <c>false</c>.</returns>
            <param name="symbol">Symbol.</param>
        </member>
        <member name="M:MonoDevelop.Ide.TypeSystem.NR5CompatibiltyExtensions.IsDesignerBrowsable(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns true if the symbol wasn't tagged with
            [System.ComponentModel.BrowsableAttribute (false)]
            </summary>
            <returns><c>true</c> if is designer browsable the specified symbol; otherwise, <c>false</c>.</returns>
            <param name="symbol">Symbol.</param>
        </member>
        <member name="P:MonoDevelop.Ide.TypeSystem.EditorNotificationServiceFactory.EditorDialogService.NotificationCallback">
            <summary>
            For testing purposes only.  If non-null, this callback will be invoked instead of showing a dialog.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.TypeSystem.MonoDevelopMetadataReference.Snapshot">
            <summary>
            Represents a metadata reference corresponding to a specific version of a file.
            If a file changes in future this reference will still refer to the original version.
            </summary>
            <remarks>
            The compiler observes the metadata content a reference refers to by calling <see cref="M:Microsoft.CodeAnalysis.PortableExecutableReference.GetMetadataImpl"/>
            and the observed metadata is memoized by the compilation. However we drop compilations to decrease memory consumption. 
            When the compilation is recreated for a solution the compiler asks for metadata again and we need to provide the original content,
            not read the file again. Therefore we need to save the timestamp on the <see cref="T:MonoDevelop.Ide.TypeSystem.MonoDevelopMetadataReference.Snapshot"/>.
            
            When the VS observes a change in a metadata reference file the project version is advanced and a new instance of 
            <see cref="T:MonoDevelop.Ide.TypeSystem.MonoDevelopMetadataReference.Snapshot"/> is created for the corresponding reference.
            </remarks>
        </member>
        <member name="T:MonoDevelop.Ide.TypeSystem.MonoDevelopAnalyzer.AnalyzerAssemblyLoaderThatEnsuresFileBeingWatched">
            <summary>
            This custom loader just wraps an existing loader, but ensures that we start listening to the file
            for changes once we've actually looked at the file.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.TypeSystem.MonoDevelopAnalyzer.VisualStudioUnresolvedAnalyzerReference">
            <summary>
            This custom <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/>, just wraps an existing <see cref="T:Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference"/>,
            but ensure that we start listening to the file for changes once we've actually observed it, so that if the
            file then gets created on disk, we are notified.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.ProjectOperations">
            <summary>
            This is the basic interface to the workspace.
            </summary>
            <summary>
            This is the basic interface to the workspace.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.ProjectOperations.SolutionItemBuildBatch">
            <summary>
            Represents a group of solution items being built together.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.ProjectOperations.SolutionItemBuildBatch.Create(System.Collections.Generic.IEnumerable{MonoDevelop.Projects.IBuildTarget})">
            <summary>
            Simplifies a group of build targets
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.ProjectOperations.ConfirmExecutionOperation">
            <summary>
            Checks if an execution operation can start (asking the user if necessary)
            </summary>
            <returns>
            True if execution can continue, false otherwise
            </returns>
            <remarks>
            This method must be called before starting an execution operation. If there is already an execution in
            progress, MonoDevelop will ask confirmation for stopping the current operation.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Ide.ProjectOperations.CheckAndBuildForExecute(System.Collections.Generic.ICollection{MonoDevelop.Projects.IBuildTarget},MonoDevelop.Projects.ConfigurationSelector,System.Boolean,System.Boolean,System.Func{MonoDevelop.Projects.IBuildTarget,MonoDevelop.Core.ProgressMonitor,System.Threading.Tasks.Task},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Prepares projects/solutions for execution by building them and their execution dependencies if necessary.
            </summary>
            <returns>Whether the operation was successful.</returns>
            <param name="executionTargets">The projects and/or solution to build. If there are multiple projects, they must be in the same solution.</param>
            <param name="configuration">The configuration selector.</param>
            <param name="buildWithoutPrompting">Whether to prompt the user before building, when building is necessary.</param>
            <param name="cancelOnWarning">Whether to cancel the execution operation if there is a build warning.</param>
            <param name="createPrepareExecutionTask">
            May be executed in parallel with the build to perform additional
            preparation that does not depend on the build, such as launching a simulator.
            There is no guaranteed this will be executed for any target.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.ProjectOperations.PromptToBuild">
            <summary>
            Prompts the user whether they want to build the project
            </summary>
            <returns>True to execute without building, false to cancel, null to build.</returns>
        </member>
        <member name="M:MonoDevelop.Ide.ProjectOperations.FastCheckNeedsBuild(MonoDevelop.Projects.IBuildTarget,MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.TargetEvaluationContext)">
            <summary>
            Given a build target, determines whether it or its dependencies needs to be built.
            </summary>
            <param name="target">The build target to check.</param>
            <param name="configuration">The build configuration selector.</param>
        </member>
        <member name="M:MonoDevelop.Ide.ProjectOperations.InitOperationContext``1(MonoDevelop.Projects.IBuildTarget,``0)">
            <summary>
            Initializes the context to be used for build operations. It currently just initializes
            it with the currently selected execution target.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.ProjectOperations.AddFilesToProject(MonoDevelop.Projects.Project,MonoDevelop.Core.FilePath[],MonoDevelop.Core.FilePath[],System.String)">
            <summary>
            Adds files to a project, potentially asking the user whether to move, copy or link the files.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Execution.ParameterizedExecutionHandler">
            <summary>
            This class can be used to implement an execution handler that needs
            arguments to run.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Execution.ParameterizedExecutionHandler.Execute(MonoDevelop.Core.Execution.ExecutionCommand,MonoDevelop.Core.Execution.OperationConsole,MonoDevelop.Ide.Execution.CommandExecutionContext,System.Object)">
            <summary>
            Runs a command
            </summary>
            <param name="command">
            Command to run
            </param>
            <param name="console">
            The console where to redirect the output
            </param>
            <param name="ctx">
            Context with execution information
            </param>
            <param name="configurationData">
            Configuration information. Created by the IExecutionConfigurationEditor object.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.Execution.ParameterizedExecutionHandler.CreateEditor">
            <summary>
            Creates an editor to be used to edit the execution handler arguments.
            </summary>
            <returns>
            A <see cref="T:MonoDevelop.Ide.Execution.IExecutionConfigurationEditor"/>
            </returns>
        </member>
        <member name="T:MonoDevelop.Ide.Execution.IExecutionConfigurationEditor">
            <summary>
            This interface can be used to implement a widget which edits the arguments
            of a parameterized execution handler
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Execution.IExecutionConfigurationEditor.Load(MonoDevelop.Ide.Execution.CommandExecutionContext,System.Object)">
            <summary>
            Call to create the editor widget.
            </summary>
            <param name="ctx">
            Information about the execution context.
            </param>
            <param name="data">
            Data to edit. It can be null if there is no data to load, in which case
            the widget should be initialized to the default configuration.
            This data MUST NOT be modified by the editor. The Save method should
            return a new instance with the new data.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.Execution.IExecutionConfigurationEditor.Save">
            <summary>
            Called to get the data entered by the user.
            The returned object must be serializable by MD.Core.Serialization.
            Notice that Save() may not be called if the user cancels the dialog,
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Execution.IExecutionCommandCustomizer">
            <summary>
            This interface can be used to allow the user to customize a command.
            A customizer can for example set environment variables or modify the
            arguments of a command.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Execution.IExecutionCommandCustomizer.CanCustomize(MonoDevelop.Core.Execution.ExecutionCommand)">
            <summary>
            Must return true if the customizer can customize the provided command
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Execution.IExecutionCommandCustomizer.Customize(MonoDevelop.Core.Execution.ExecutionCommand,System.Object)">
            <summary>
            Customizes the command with the provided data.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Execution.IExecutionCommandCustomizer.CreateEditor">
            <summary>
            Creates the editor to be used to enter the customization parameters
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Execution.RunConfigurationEditor.Validate">
            <summary>
            Validates that the editor contains valid data. If the data is valid the method returns True.
            If the data is not valid, the editor can show error messages to the user and return False.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Extensions.IOpenFileDialogHandler">
            <summary>
            This interface can be implemented to provide a custom implementation
            for the OpenFileDialog (used to select a file or project to open)
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Extensions.OpenFileDialogData">
            <summary>
            Data for the IOpenFileDialogHandler implementation
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Extensions.OpenFileDialogData.ShowEncodingSelector">
            <summary>
            Set to true if the encoding selector has to be shown
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Extensions.OpenFileDialogData.ShowViewerSelector">
            <summary>
            Set to true if the viewer selector has to be shown
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Extensions.OpenFileDialogData.Encoding">
            <summary>
            Selected encoding. To be set by the handler.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Extensions.OpenFileDialogData.CloseCurrentWorkspace">
            <summary>
            Set to true if the workspace has to be closed before opening a solution. To be set by the handler.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Extensions.OpenFileDialogData.SelectedViewer">
            <summary>
            Selected viewer. To be set by the handler.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Extensions.IAddFileDialogHandler">
            <summary>
            This interface can be implemented to provide a custom implementation
            for the AddFileDialog dialog (used to add files to a project)
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Extensions.AddFileDialogData">
            <summary>
            Data for the IAddFileDialogHandler implementations
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Extensions.AddFileDialogData.BuildActions">
            <summary>
            Build actions from which the user can select the one to apply to the new file
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Extensions.AddFileDialogData.OverrideAction">
            <summary>
            Selected build action. To be set by the handler.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Extensions.MimeTypeNode.RoslynName">
            <summary>
            The name used by Roslyn to identify this language.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Extensions.IdeCustomizer">
            <summary>
            Allows customizing the behavior of the IDE
            </summary>
            <remarks>
            IN PROGRESS: this class will have hooks that will allow applications that
            host MonoDevelop to customize the behavior of the IDE, such as hiding
            menus and commands, or disabling some functionality.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Ide.Extensions.IdeCustomizer.Initialize">
            <summary>
            Called just after the initializer is created
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Extensions.IdeCustomizer.OnCoreInitialized">
            <summary>
            Called when the add-in engine has been initialized
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Extensions.IdeCustomizer.OnIdeInitialized">
            <summary>
            Called when the Ide has been initialized
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Extensions.IdeCustomizer.OnIdeShutdown">
            <summary>
            Called after the main loop stops running
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Extensions.IdeCustomizer.OnCoreShutdown">
            <summary>
            Called after the IDE core has been shut down
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Extensions.ErrorDocumentationProvider.GetDocumentationLink(System.String)">
            <summary>
            Provides a link to the documentation using the extension's regex and url template.
            </summary>
            <returns>The documentation link or null.</returns>
            <param name="errorDescription">The error message with the error code to parse.</param>
        </member>
        <member name="P:MonoDevelop.Ide.CustomTools.SingleFileCustomToolResult.Errors">
            <summary>
            Errors and warnings from the generator.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CustomTools.SingleFileCustomToolResult.GeneratedFilePath">
            <summary>
            The absolute name of the generated file. Must be in same directory as source file.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CustomTools.SingleFileCustomToolResult.OverrideBuildAction">
            <summary>
            Overrides the default action on the generated file.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CustomTools.SingleFileCustomToolResult.UnhandledException">
            <summary>
            Any unhandled exception from the generator.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.CustomTools.SingleProjectFileCustomTool">
            <summary>
            Abstract class for processing a file in a project for a custom tool
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.CustomTools.SingleFileCustomToolWrapper">
            <summary>
            Wraps a ISingleFileCustomTool and delegates execution to customTool's Generate method
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CodeCompletion.CompletionListWindow.WasShiftPressed">
            <summary>
            Gets or sets a value indicating that shift was pressed during enter.
            </summary>
            <value>
            <c>true</c> if was shift pressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:MonoDevelop.Ide.CodeCompletion.ParameterInformationWindowManager.wasCompletionWindowVisible">
            <summary>
            This stores information about code completion window(not about Parameter information window)
            at time of last showing of Parameter window, so we know if we have reposition
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CodeCompletion.CompletionData.PriorityGroup">
            <summary>
            int.MaxValue == highest prioriy,
            -int.MaxValue == lowest priority
            </summary>
            <value>The priority group.</value>
        </member>
        <member name="T:MonoDevelop.Ide.CodeCompletion.CompletionDataMatcher">
            <summary>
            This class uses a StringMatcher to check for matches and for calculating
            ranks. It caches the results on CompletionData objects, so that
            several calls on the matching methods will be able to reuse
            calculated data.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.CodeCompletion.ICompletionDataList.FilterCompletionList(MonoDevelop.Ide.CodeCompletion.CompletionListFilterInput)">
            <summary>
            Gives the abilit to override the custom filtering
            </summary>
            <returns>The filtered completion list, or null if the default list should be taken.</returns>
            <param name="input">Contains all information needed to filter the list.</param>
        </member>
        <member name="M:MonoDevelop.Ide.CodeCompletion.CompletionDataList.GetCompletionDataMatcher(System.String)">
            <summary>
            Gets a code completion matcher for the provided string. It will try to reuse an existing one.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.CodeCompletion.TooltipInformation">
            <summary>
            A Tooltip class provides the information required to display a styled language item tooltip. 
            A styled tooltip includes pango markups for the signature, for one or more categories and a summary.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CodeCompletion.TooltipInformation.SignatureMarkup">
            <summary>
            Gets or sets the signature markup. The signature is never null.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CodeCompletion.TooltipInformation.Categories">
            <summary>
            Gets the categories. This is never null, but may be empty.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CodeCompletion.TooltipInformation.SummaryMarkup">
            <summary>
            Gets or sets the summary markup. The summary markup is never null.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CodeCompletion.TooltipInformation.FooterMarkup">
            <summary>
            Gets or sets the footer markup.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.CodeCompletion.TooltipInformation.AddCategory(System.String,System.String)">
            <summary>
            Adds a new category to the tooltip.
            </summary>
            <param name='categoryLabel'>
            The category label as non escaped text.
            </param>
            <param name='categoryMarkup'>
            The pango markup of the category contents.
            </param>
        </member>
        <member name="P:MonoDevelop.Ide.CodeCompletion.TaggedTooltipInformation`1.Tag">
            <summary>
            Gets or sets the tag which contains custom data.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CodeCompletion.ParameterHintingResult.ParameterListStart">
            <summary>Used for positioning the parameter list tooltip</summary>
        </member>
        <member name="T:MonoDevelop.Ide.CodeCompletion.MruCache">
            <summary>
            A cache that keeps a list of the most recently used completion items
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.CodeCompletion.MruCache.GetIndex(MonoDevelop.Ide.CodeCompletion.CompletionData)">
            <summary>
            Lower is better. 1 == not in list.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.CodeCompletion.ICompletionDataKeyHandler.IsFilterCharacter(MonoDevelop.Ide.CodeCompletion.CompletionData,System.Char,System.String)">
            <summary>
            Returns true if the character typed should be used to filter the specified completion
            item.  A character will be checked to see if it should filter an item.  If not, it will be
            checked to see if it should commit that item.  If it does neither, then completion will
            be dismissed.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.CodeCompletion.ICompletionDataKeyHandler.IsCommitCharacter(MonoDevelop.Ide.CodeCompletion.CompletionData,System.Char,System.String)">
            <summary>
            Returns true if the character is one that can commit the specified completion item. A
            character will be checked to see if it should filter an item.  If not, it will be checked
            to see if it should commit that item.  If it does neither, then completion will be
            dismissed.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.CodeCompletion.ICompletionDataKeyHandler.SendEnterThroughToEditor(MonoDevelop.Ide.CodeCompletion.CompletionData,System.String)">
            <summary>
            Returns true if the enter key that was typed should also be sent through to the editor
            after committing the provided completion item.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.CodeCompletion.CompletionTriggerInfo">
            <summary>
            Provides information about what triggered completion.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CodeCompletion.CompletionTriggerInfo.CompletionTriggerReason">
            <summary>
            Provides the reason that completion was triggered.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CodeCompletion.CompletionTriggerInfo.TriggerCharacter">
            <summary>
            If the <see cref="P:MonoDevelop.Ide.CodeCompletion.CompletionTriggerInfo.CompletionTriggerReason"/> was <see
            cref="F:MonoDevelop.Ide.CodeCompletion.CompletionTriggerReason.CharTyped"/> then this was the character that was
            typed or deleted by backspace.  Otherwise it is null.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CodeCompletion.CompletionTriggerInfo.IsAugment">
            <summary>
            Returns true if the reason completion was triggered was to augment an existing list of
            completion items.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CodeCompletion.CompletionTriggerInfo.IsDebugger">
            <summary>
             Returns true if completion was triggered by the debugger.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CodeCompletion.CompletionTriggerInfo.IsImmediateWindow">
            <summary>
            Return true if completion is running in the Immediate Window.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.CodeCompletion.SignatureHelpParameterHintingData">
            <summary>
            SignatureHelpItem is internal, therefore this class has only internal visibility.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.CodeCompletion.CompletionController">
            <summary>
            This is the controller of the code completion window.
            The controller takes code completion data and keystrokes as input, and shows the
            results in the code completion view.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.CodeCompletion.CompletionController.filteredItems">
            <summary>
            A list that contains the indices of the dataList items that will be shown in the completion window,
            and in the order they need to be shown.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.CodeCompletion.CompletionController.filteredCategories">
            <summary>
            List of categories referenced in dataList. For each category there is a list of item indices,
            which are the items to be shown for each category.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.CodeCompletion.CompletionController.completionString">
            <summary>
            Text typed so far
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.CodeCompletion.CompletionController.listWindow">
            <summary>
            Front end for the completion window
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.CodeCompletion.CompletionController.context">
            <summary>
            Completion context provided by the completion widget. Has information about the location of the caret.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.CodeCompletion.CompletionController.completionWidget">
            <summary>
            The widget for which the completion window is shown
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.CodeCompletion.CompletionController.cache">
            <summary>
            A cache that keeps a list of the most recently used completion items
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.CodeCompletion.CompletionController.mutableList">
            <summary>
            If the completion data list is mutable, this contains the reference to the interface that handles mutability
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.CodeCompletion.CompletionController.InitializeSession(MonoDevelop.Ide.CodeCompletion.ICompletionWidget,MonoDevelop.Ide.CodeCompletion.CodeCompletionContext)">
            <summary>
            Initializes the code completion session. After this method is called, the controller is ready to start
            keeping track of keystrokes. When ShowListWindow is called, the controller will take into account
            what has been typed since InitializeSession.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CodeCompletion.CompletionController.WasShiftPressed">
            <summary>
            Gets or sets a value indicating that shift was pressed during enter.
            </summary>
            <value>
            <c>true</c> if was shift pressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:MonoDevelop.Ide.CodeCompletion.CompletionController.SelectionChanged">
            <summary>
            Occurs when the selected item in completion window changes
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.CodeCompletion.CompletionController.WordCompleted">
            <summary>
            Occurs when the selected code completion item is committed
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.CodeCompletion.CompletionController.VisibleChanged">
            <summary>
            Occurs when the Visible property changes
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CodeCompletion.CompletionController.SelectedItem">
            <summary>
            Item currently selected in the code completion window
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.CodeCompletion.CompletionController.SelectedItemIndex">
            <summary>
            Gets or sets the index inside CompletionDataList of the currently selected item
            </summary>
            <value>The index of the selected item.</value>
        </member>
        <member name="M:MonoDevelop.Ide.CodeCompletion.CompletionController.FilterItems(System.String)">
            <summary>
            Filters and sorts the list of items to be shown to the user
            </summary>
            <param name="oldCompletionString">Old completion string value before current one was set.</param>
        </member>
        <member name="M:MonoDevelop.Ide.CodeCompletion.ICompletionViewEventSink.OnPreProcessPreviewCompletionEntryKey(MonoDevelop.Ide.Editor.Extension.KeyDescriptor)">
            <summary>
            Notifies that text in the preview completion widget entry has changed
            </summary>
            <returns><c>true</c>, if the event has been processed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MonoDevelop.Ide.CodeCompletion.CompletionListWindowGtk.ResetState">
            <summary>
            This method is used to set the completion window to it's inital state.
            This is required for re-using the window object.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.DesktopService.NativeToolkit">
            <summary>
            Returns the XWT toolkit for the native toolkit (Cocoa on Mac, WPF on Windows)
            </summary>
            <returns>The native toolkit.</returns>
        </member>
        <member name="M:MonoDevelop.Ide.DesktopService.OpenTerminal(MonoDevelop.Core.FilePath,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Opens an external terminal window.
            </summary>
            <param name="workingDirectory">Working directory.</param>
            <param name="environmentVariables">Environment variables.</param>
            <param name="windowTitle">Window title.</param>
        </member>
        <member name="M:MonoDevelop.Ide.DesktopService.GrabDesktopFocus(Gtk.Window)">
            <summary>
            Grab the desktop focus for the window.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.DesktopService.RestartIde(System.Boolean)">
            <summary>
            Restarts MonoDevelop
            </summary>
            <returns> false if the user cancels exiting. </returns>
            <param name="reopenWorkspace"> true to reopen current workspace. </param>
        </member>
        <member name="M:MonoDevelop.Ide.DispatchService.RunAnimation(System.Func{System.Int32})">
            <summary>
            Runs a delegate at regular intervals 
            </summary>
            <returns>
            An animation object. It can be disposed to stop the animation.
            </returns>
            <param name='animation'>
            The delegate to run. The return value if the number of milliseconds to wait until the delegate is run again.
            The execution will stop if the deletgate returns 0
            </param>
        </member>
        <member name="E:MonoDevelop.Ide.IdeApp.FocusIn">
            <summary>
            Fired when the IDE gets the focus
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.IdeApp.FocusOut">
            <summary>
            Fired when the IDE loses the focus
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.IdeApp.HasInputFocus">
            <summary>
            Gets a value indicating whether the IDE has the input focus
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.IdeApp.Exit">
            <summary>
            Exits MonoDevelop. Returns false if the user cancels exiting.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.IdeApp.Restart(System.Boolean)">
            <summary>
            Restarts MonoDevelop
            </summary>
            <returns> false if the user cancels exiting. </returns>
            <param name="reopenWorkspace"> true to reopen current workspace. </param>
            <remarks>
            Starts a new MonoDevelop instance in a new process and 
            stops the current MonoDevelop instance.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Ide.IdeApp.RunWhenIdle(System.Action)">
            <summary>
            Runs an action when the IDE is idle, that is, when the user is not performing any action.
            </summary>
            <param name="action">Action to execute</param>
            <remarks>
            This method should be used, for example, to show a notification to the user. The method will ensure
            that the dialog is shown when the user is not interacting with the IDE.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Ide.IdeApp.DisableIdleActions">
            <summary>
            Prevents the execution of idle actions
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.IdeApp.EnableIdleActions">
            <summary>
            Resumes the execution of idle actions
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.IdePreferences.CustomPadFont">
            <summary>
            Font to use for treeview pads. Returns null if no custom font is set.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.IdePreferences.CustomOutputPadFont">
            <summary>
            Font to use for output pads. Returns null if no custom font is set.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.RootWorkspace.CurrentWorkspaceLoadTask">
            <summary>
            Gets the task that is currently loading a solution
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.FileRemovedFromProject">
            <summary>
            Fired when a file is removed from a project.
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.FileAddedToProject">
            <summary>
            Fired when a file is added to a project
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.FileChangedInProject">
            <summary>
            Fired when a file belonging to a project is modified.
            </summary>
            <remarks>
            If the file belongs to several projects, the event will be fired for each project
            </remarks>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.FilePropertyChangedInProject">
            <summary>
            Fired when a property of a project file is modified
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.FileRenamedInProject">
            <summary>
            Fired when a project file is renamed
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.SolutionLoaded">
            <summary>
            Fired when a solution is loaded in the workbench
            </summary>
            <remarks>
            This event is fired recursively for every solution
            opened in the IDE. For example, if the user opens a workspace
            which contains two solutions, this event will be fired once
            for each solution.
            </remarks>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.SolutionUnloaded">
            <summary>
            Fired when a solution loaded in the workbench is unloaded
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.FirstWorkspaceItemOpened">
            <summary>
            Fired when a workspace item (a solution or workspace) is opened and there
            is no other item already open
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.FirstWorkspaceItemRestored">
            <summary>
            Fired when a workspace item (a solution or workspace) is fully restored and there
            is no other item already open 
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.LastWorkspaceItemClosed">
            <summary>
            Fired a workspace item loaded in the IDE is closed and there are no other
            workspace items opened.
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.WorkspaceItemLoaded">
            <summary>
            Fired when a workspace item (a solution or workspace) is loaded.
            </summary>
            <remarks>
            This event is fired recursively for every solution and workspace 
            opened in the IDE. For example, if the user opens a workspace
            which contains two solutions, this event will be fired three times: 
            once for the workspace, and once for each solution.
            </remarks>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.WorkspaceItemUnloaded">
            <summary>
            Fired when a workspace item (a solution or workspace) is unloaded
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.WorkspaceItemOpened">
            <summary>
            Fired a workspace item (a solution or workspace) is opened in the IDE
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.WorkspaceItemClosed">
            <summary>
            Fired when a workspace item (a solution or workspace) is closed in the IDE
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.StoringUserPreferences">
            <summary>
            Fired when user preferences for the active solution are being stored
            </summary>
            <remarks>
            Add-ins can subscribe to this event to store custom user preferences
            for a solution. Preferences can be stored in the PropertyBag provided
            in the event arguments object.
            </remarks>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.LoadingUserPreferences">
            <summary>
            Fired when user preferences for a solution are being loaded
            </summary>
            <remarks>
            Add-ins can subscribe to this event to load preferences previously
            stored in the StoringUserPreferences event.
            </remarks>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.ItemUnloading">
            <summary>
            Fired when an item (a project, solution or workspace) is going to be unloaded.
            </summary>
            <remarks>
            This event is fired before unloading the item, and the unload operation can
            be cancelled by setting the Cancel property of the ItemUnloadingEventArgs
            object to True.
            </remarks>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.ReferenceAddedToProject">
            <summary>
            Fired when an assembly reference is added to a .NET project
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.ReferenceRemovedFromProject">
            <summary>
            Fired when an assembly reference is added to a .NET project
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.ItemAddedToSolution">
            <summary>
            Fired just before a project is added to a solution
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.ItemRemovedFromSolution">
            <summary>
            Fired after a project is removed from a solution
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.ActiveConfigurationChanged">
            <summary>
            Fired when the active solution configuration has changed
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.ActiveExecutionTargetChanged">
            <summary>
            Fired when the active execution target has changed
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.ConfigurationsChanged">
            <summary>
            Fired when the list of solution configurations has changed
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.RuntimesChanged">
            <summary>
            Fired when the list of available .NET runtimes has changed
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RootWorkspace.ActiveRuntimeChanged">
            <summary>
            Fired when the active .NET runtime has changed
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Desktop.DesktopApplication.Id">
            <summary>
            Used to uniquely identify the application or command.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Desktop.RecentFileStorage">
             <summary>
             Implementation of Recent File Storage according to 
             "Recent File Storage Specification v0.2" from freedesktop.org.
            
             http://standards.freedesktop.org/recent-file-spec/recent-file-spec-0.2.html
             </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Desktop.RecentItem">
            <summary>
            Implementation of RecentItem according to "Recent File Storage Specification v0.2" from 
            the freedesktop.org.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Desktop.PlatformService.LoadNativeToolkit">
            <summary>
            Loads the XWT toolkit backend for the native toolkit (Cocoa on Mac, WPF on Windows)
            </summary>
            <returns>The native toolkit.</returns>
        </member>
        <member name="P:MonoDevelop.Ide.Desktop.PlatformService.CanOpenTerminal">
            <summary>
            True if both OpenTerminal and StartConsoleProcess are implemented.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Desktop.PlatformService.StartUpdatesInstaller(MonoDevelop.Core.FilePath,MonoDevelop.Core.FilePath)">
            <summary>
            Starts the installer.
            </summary>
            <param name='installerDataFile'>
            File containing the list of updates to install
            </param>
            <param name='updatedInstallerPath'>
            Optional path to an updated installer executable
            </param>
            <remarks>
            This method should start the installer in an independent process.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Ide.Desktop.PlatformService.GrabDesktopFocus(Gtk.Window)">
            <summary>
            Grab the desktop focus for the window.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Desktop.PlatformService.RestartIde(System.Boolean)">
            <summary>
            Restarts MonoDevelop
            </summary>
            <param name="reopenWorkspace"> true to reopen current workspace. </param>
        </member>
        <member name="M:MonoDevelop.Ide.Desktop.MemoryMonitor.OnStatusChanged(MonoDevelop.Ide.PlatformMemoryStatusEventArgs)">
            <summary>
            Notify that the platform memory status has changed.
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.Desktop.MemoryMonitor.StatusChanged">
            <summary>
            Occurs then the OS signals that the memory status has changed.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Desktop.ThermalMonitor.OnStatusChanged(MonoDevelop.Ide.PlatformThermalStatusEventArgs)">
            <summary>
            Notify that the platform thermal status has changed.
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.Desktop.ThermalMonitor.StatusChanged">
            <summary>
            Occurs then the OS signals that the thermal status has changed.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.MessageService.ShowCustomDialog(MonoDevelop.Components.Dialog)">
            <summary>
            Places, runs and destroys a transient dialog.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.MessageService.RunCustomDialog(MonoDevelop.Components.Dialog,MonoDevelop.Components.Window)">
            <summary>
            Places and runs a transient dialog. Does not destroy it, so values can be retrieved from its widgets.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.MessageService.GetDefaultModalParent">
            <summary>
            Gets a default parent for modal dialogs.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.MessageService.PlaceDialog(MonoDevelop.Components.Window,MonoDevelop.Components.Window)">
            <summary>
            Positions a dialog relative to its parent on platforms where default placement is known to be poor.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.MessageService.CenterWindow(MonoDevelop.Components.Window,MonoDevelop.Components.Window)">
            <summary>Centers a window relative to its parent.</summary>
        </member>
        <member name="M:MonoDevelop.Ide.TextFileProvider.EditFile(MonoDevelop.Core.FilePath,System.Action{MonoDevelop.Ide.Editor.ITextDocument})">
            <summary>
            Performs an edit operation on a text file regardless of it's open in the IDE or not.
            </summary>
            <returns><c>true</c>, if file operation was saved, <c>false</c> otherwise.</returns>
            <param name="filePath">File path.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:MonoDevelop.Ide.IdeStartup.ResolveMSBuildAssemblies">
            <summary>
            Resolves MSBuild 15.0 assemblies that are used by MonoDevelop.Ide and are included with Mono.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.IdeStartup.HashSdbmBounded(System.String)">
            <summary>SDBM-style hash, bounded to a range of 1000.</summary>
        </member>
        <member name="M:MonoDevelop.Ide.Fonts.FontService.GetFontDescription(System.String,System.Boolean)">
            <summary>
            Gets the font description for the provided font id
            </summary>
            <returns>
            The font description.
            </returns>
            <param name='name'>
            Identifier of the font
            </param>
            <param name='createDefaultFont'>
            If set to <c>false</c> and no custom font has been set, the method will return null.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.Updater.IUpdateHandler.CheckUpdates(MonoDevelop.Core.ProgressMonitor,System.Boolean)">
            <summary>
            Called to check if there are updates available
            </summary>
            <param name='monitor'>
            Progress monitor.
            </param>
            <param name='automatic'>
            'True' if the check has been automatically started by MD (e.g. when MD starts). 
            'False' if the check was started explicitly by the user.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.Updater.UpdateInfo.FixVersionNumber(System.Int32)">
            <summary>
            Unspecified version numbers can be -1 so map this to 0 instead.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.WelcomePage.WelcomePageBarButton.IsVisible">
            <summary>
            If false the window button isn't inserted into the page bar.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.TextEditing.TextEditorService">
            <summary>
            Offers several methods for tracking changes being done in edited files
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.TextEditing.TextEditorService.NotifyLineCountChanged(MonoDevelop.Projects.Text.ITextFile,System.Int32,System.Int32,System.Int32)">
            <summary>
            Notifies to the text editor service that there has been a line count change in a file being edited
            </summary>
            <param name='textFile'>
            File that changed
            </param>
            <param name='lineNumber'>
            Line number
            </param>
            <param name='lineCount'>
            Number of lines added (or removed if negative)
            </param>
            <param name='column'>
            Column.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.TextEditing.TextEditorService.NotifyLineCountChangesReset(MonoDevelop.Projects.Text.ITextFile)">
            <summary>
            Notifies to the text editor service that all previous line change notifications for a file have to be discarded
            </summary>
            <param name='textFile'>
            Text file.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.TextEditing.TextEditorService.NotifyLineCountChangesCommitted(MonoDevelop.Projects.Text.ITextFile)">
            <summary>
            Notifies to the text editor service that all previous line change notifications for a file have to be committed
            </summary>
            <param name='textFile'>
            Text file.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.TextEditing.TextEditorService.RegisterExtension(MonoDevelop.Ide.TextEditing.FileExtension)">
            <summary>
            Registers a text editor extension.
            </summary>
            <param name='extension'>
            The extension.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.TextEditing.TextEditorService.UnregisterExtension(MonoDevelop.Ide.TextEditing.FileExtension)">
            <summary>
            Unregisters a text editor extension.
            </summary>
            <param name='extension'>
            Extension.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.TextEditing.TextEditorService.GetFileExtensions(MonoDevelop.Core.FilePath)">
            <summary>
            Gets the text editor extensions for a file
            </summary>
            <returns>
            The file extensions.
            </returns>
            <param name='file'>
            File.
            </param>
        </member>
        <member name="E:MonoDevelop.Ide.TextEditing.TextEditorService.LineCountChanged">
            <summary>
            Occurs when there has been a line count change in a file being edited
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.TextEditing.TextEditorService.LineCountChangesReset">
            <summary>
            Occurs when all previous line change notifications for a file have to be discarded
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.TextEditing.TextEditorService.LineCountChangesCommitted">
            <summary>
            Occurs when all previous line change notifications for a file have to be committed
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.TextEditing.TextEditorService.FileExtensionAdded">
            <summary>
            Occurs when a text editor extension has been added
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.TextEditing.TextEditorService.FileExtensionRemoved">
            <summary>
            Occurs when a text editor extension has been removed
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.StatusBar">
            <summary>
            The MonoDevelop status bar.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.StatusBar.ShowStatusIcon(Xwt.Drawing.Image)">
            <summary>
            Shows a status icon in the toolbar. The icon can be removed by disposing
            the StatusBarIcon instance.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.StatusBar.CreateContext">
            <summary>
            Creates a status bar context. The returned context can be used to show status information
            which will be cleared when the context is disposed. When several contexts are created,
            the status bar will show the status of the latest created context.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.StatusBar.SetMessageSourcePad(MonoDevelop.Ide.Gui.Pad)">
            <summary>
            Sets a pad which has detailed information about the status message. When clicking on the
            status bar, this pad will be activated. This source pad is reset at every ShowMessage call.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.StatusBar.SetCancellationTokenSource(System.Threading.CancellationTokenSource)">
            <summary>
            When set, the status bar can be cancelled via this cancellation source.
            </summary>
            <value>The cancellation token.</value>
        </member>
        <member name="T:MonoDevelop.Ide.StatusBarContextBase">
            <summary>
            The MonoDevelop status bar.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.StatusBarContextBase.ShowError(System.String)">
            <summary>
            Shows a message with an error icon
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.StatusBarContextBase.ShowWarning(System.String)">
            <summary>
            Shows a message with a warning icon
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.StatusBarContextBase.ShowMessage(System.String)">
            <summary>
            Shows a message in the status bar
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.StatusBarContextBase.ShowMessage(System.String,System.Boolean)">
            <summary>
            Shows a message in the status bar
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.StatusBarContextBase.ShowMessage(MonoDevelop.Core.IconId,System.String)">
            <summary>
            Shows a message in the status bar
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.StatusBarContextBase.ShowMessage(MonoDevelop.Core.IconId,System.String,System.Boolean)">
            <summary>
            Shows a message in the status bar
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.StatusBarContextBase.BeginProgress(System.String)">
            <summary>
            Shows a progress bar, with the provided label next to it
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.StatusBarContextBase.BeginProgress(MonoDevelop.Core.IconId,System.String)">
            <summary>
            Shows a progress bar, with the provided label and icon next to it
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.StatusBarContextBase.SetProgressFraction(System.Double)">
            <summary>
            Sets the progress fraction. It can only be used after calling BeginProgress.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.StatusBarContextBase.EndProgress">
            <summary>
            Hides the progress bar shown with BeginProgress
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.StatusBarContextBase.Pulse">
            <summary>
            Pulses the progress bar shown with BeginProgress
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.StatusBarContextBase.AutoPulse">
            <summary>
            When set, the status bar progress will be automatically pulsed at short intervals
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.StatusBarContext">
            <summary>
            The MonoDevelop status bar.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.StatusBarContext.CancellationTokenSource">
            <summary>
            When set, the status bar can be cancelled via this cancellation source.
            </summary>
            <value>The cancellation token.</value>
        </member>
        <member name="T:MonoDevelop.Ide.StatusBarIcon">
            <summary>
            The MonoDevelop status bar.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.StatusBarIcon.Title">
            <summary>
            The title of the status icon. Used for accessibility
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:MonoDevelop.Ide.StatusBarIcon.ToolTip">
            <summary>
            Tooltip of the status icon
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.StatusBarIcon.Help">
            <summary>
            The accessibility help message for the button
            </summary>
            <value>The help.</value>
        </member>
        <member name="E:MonoDevelop.Ide.StatusBarIcon.Clicked">
            <summary>
            The clicked event to subscribe mouse clicks on the icon.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.StatusBarIcon.Image">
            <summary>
            The icon
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.StatusBarIcon.SetAlertMode(System.Int32)">
            <summary>
            Sets alert mode. The icon will flash for the provided number of seconds.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.IDocumentLine">
            <summary>
            A line inside a <see cref="T:MonoDevelop.Ide.Editor.ITextDocument"/>.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.IDocumentLine.LengthIncludingDelimiter">
            <summary>
            Gets the length of the line including the line delimiter.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.IDocumentLine.SegmentIncludingDelimiter">
            <summary>
            Gets the text segment of the line including the line delimiter.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.IDocumentLine.UnicodeNewline">
            <summary>
            Gets the unicode newline for this line. Returns UnicodeNewline.Unknown for no new line (in the last line of the document)
            </summary>EndOffsetIncludingDelimiterEndOffsetIncludingDelimiter
        </member>
        <member name="P:MonoDevelop.Ide.Editor.IDocumentLine.DelimiterLength">
            <summary>
            Gets the length of the line terminator.
            Returns 1 or 2; or 0 at the end of the document.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.IDocumentLine.LineNumber">
            <summary>
            Gets the number of this line.
            The first line has the number 1.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.IDocumentLine.PreviousLine">
            <summary>
            Gets the previous line. Returns null if this is the first line in the document.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.IDocumentLine.NextLine">
            <summary>
            Gets the next line. Returns null if this is the last line in the document.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.DocumentLineExt.GetIndentation(MonoDevelop.Ide.Editor.IDocumentLine,MonoDevelop.Ide.Editor.IReadonlyTextDocument)">
            <summary>
            This method gets the line indentation.
            </summary>
            <param name = "line"></param>
            <param name="doc">
            The <see cref="T:MonoDevelop.Ide.Editor.IReadonlyTextDocument"/> the line belongs to.
            </param>
            <returns>
            The indentation of the line (all whitespace chars up to the first non ws char).
            </returns>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.IndentStyle.None">
            <summary>
            No indentation occurs
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.IndentStyle.Auto">
            <summary>
            The indentation from the line above will be
            taken to indent the current line
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.IndentStyle.Smart">
            <summary>
            Intelligent, context sensitive indentation will occur
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.IndentStyle.Virtual">
            <summary>
            Intelligent, context sensitive indentation that minimizes whitespaces will occur
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.TextEditorOptionsExtension.GetIndentationString(MonoDevelop.Ide.Editor.ITextEditorOptions)">
            <summary>
            Gets the indentation string for a single indent.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.FoldingType">
            <summary>
            Represents the origin for a fold segment
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.IFoldSegment">
            <summary>
            A fold segment represents a collapsible region inside the text editor.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.IFoldSegment.IsCollapsed">
            <summary>
            Gets or sets a value indicating whether this fold segment is collapsed.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.IFoldSegment.CollapsedText">
            <summary>
            Gets or sets the collapsed text. This is displayed when the folding is collapsed instead of the collapsed region.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.IFoldSegment.FoldingType">
            <summary>
            Gets or sets the type of the folding. This type gives some info about where this folding segment
            originates from.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.TooltipProvider.TakeMouseControl(MonoDevelop.Ide.Editor.TextEditor,MonoDevelop.Components.Window)">
            <summary>
            Mouse left the text area and is on top of the tip window. 
            Interactive tooltip providers should take the mouse control here because the cursor can leave the text area space.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.TextSegmentMarkerEffect.WavedLine">
            <summary>
            The region is marked as waved underline.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.TextSegmentMarkerEffect.DottedLine">
            <summary>
            The region is marked as dotted line.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.TextSegmentMarkerEffect.GrayOut">
            <summary>
            The text is grayed out.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.TextSegmentMarkerEffect.Underline">
            <summary>
            Just a simple underline
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.TextSegmentMarkerEffect.Background">
            <summary>
            Marks the background of the text as block
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.DocumentRegion">
            <summary>
            An (Begin, End) pair representing a document span. It's a TextSegment working with lines &amp; columns instead of offsets.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.DocumentRegion.IsEmpty">
            <summary>
            Gets a value indicating whether this DocumentRegion is empty.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.DefaultSourceEditorOptions">
            <summary>
            This class contains all text editor options from ITextEditorOptions and additional options
            the text editor frontend may use.  
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.TextEditor.MimeType">
            <summary>
            Gets or sets the type of the MIME.
            </summary>
            <value>The type of the MIME.</value>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.TextEditor.EolMarker">
            <summary>
            Gets the eol marker. On a text editor always use that and not GetEolMarker.
            The EOL marker of the document may get overwritten my the one from the options.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.TextEditor.FileName">
            <summary>
            Gets the name of the file the document is stored in.
            Could also be a non-existent dummy file name or null if no name has been set.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.TextEditor.ApplyTextChanges(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChange})">
            <summary>
            Applies a batch of text changes. Note that the textchange offsets are always offsets in the current (old) document.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.TextEditor.GetCharAt(System.Int32)">
            <summary>
            Gets a character at the specified position in the document.
            </summary>
            <paramref name="offset">The index of the character to get.</paramref>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset is outside the valid range (0 to TextLength-1).</exception>
            <returns>The character at the specified position.</returns>
            <remarks>This is the same as Text[offset], but is more efficient because
             it doesn't require creating a String object.</remarks>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.TextEditor.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.TextEditor.Annotations">
            <summary>
            Gets all annotations stored on this AstNode.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.ITextDocument.Text">
            <summary>
            Gets/Sets the text of the whole document..
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.ITextDocument.Item(System.Int32)">
            <summary>
            Gets or Sets a character at the specified position in the document.
            </summary>
            <paramref name="offset">The index of the character to get.</paramref>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset is outside the valid range (0 to TextLength-1).</exception>
            <returns>The character at the specified position.</returns>
            <remarks>This is the same as Text[offset], but is more efficient because
             it doesn't require creating a String object.</remarks>
        </member>
        <member name="E:MonoDevelop.Ide.Editor.ITextDocument.TextChanging">
            <summary>
            This event is called directly before a change is applied to the document.
            </summary>
            <remarks>
            It is invalid to modify the document within this event handler.
            Aborting the change (by throwing an exception) is likely to cause corruption of data structures
            that listen to the Changing and Changed events.
            </remarks>
        </member>
        <member name="E:MonoDevelop.Ide.Editor.ITextDocument.TextChanged">
            <summary>
            This event is called directly after a change is applied to the document.
            </summary>
            <remarks>
            It is invalid to modify the document within this event handler.
            Aborting the event handler (by throwing an exception) is likely to cause corruption of data structures
            that listen to the Changing and Changed events.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.ITextDocument.CreateDocumentSnapshot">
            <summary>
            Creates an immutable snapshot of this document.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Extension.AbstractUsagesExtension`1">
            <summary>
            Provides a base class for implementing highlighting of usages inside the text editor.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Extension.AbstractUsagesExtension`1.ResolveAsync(System.Threading.CancellationToken)">
            <summary>
            Tries to resolve inside the current location inside tho document.
            </summary>
            <returns><c>true</c>, if resolve was successful, <c>false</c> otherwise.</returns>
            <param name="token">A cancellation token to cancel the operation.</param>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Extension.AbstractUsagesExtension`1.GetReferencesAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets all references from a given resolve result. Note that this method is called on a background thread.
            </summary>
            <returns>The references.</returns>
            <param name="resolveResult">The resolve result given in 'TryResolve'.</param>
            <param name="token">A cancellation token to cancel the operation.</param>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Extension.IndentationTracker">
            <summary>
            The indentation tracker is for giving the editor information about virtual line indentations.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Extension.IndentationTracker.GetIndentationString(System.Int32)">
            <summary>
            Gets the indentation string for a given line.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Extension.SelectionSurroundingProvider">
            <summary>
            A selection surrounding provider handles a special handling how the text editor behaves when the user
            types a key with a selection. The selection can be surrounded instead of beeing replaced.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Extension.SelectionSurroundingProvider.GetSelectionSurroundings(System.UInt32,System.String@,System.String@)">
            <summary>
            Gets the selection surroundings for a given unicode key.
            </summary>
            <returns>
            true, if the key is valid for a surrounding action.
            </returns>
            <param name='unicodeKey'>
            The key to handle.
            </param>
            <param name='start'>
            The start of the surrounding
            </param>
            <param name='end'>
            The end of the surrounding
            </param>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Extension.TextPasteHandler">
            <summary>
            The text paste handler can do formattings to a text that is about to be pasted
            into the text document.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Extension.TextPasteHandler.FormatPlainText(System.Int32,System.String,System.Byte[])">
            <summary>
            Formats plain text that is inserted at a specified offset.
            </summary>
            <returns>
            The text that will get inserted at that position.
            </returns>
            <param name="offset">The offset where the text will be inserted.</param>
            <param name="text">The text to be inserted.</param>
            <param name="copyData">Additional data in case the text was copied from a Mono.TextEditor.</param>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Extension.TextPasteHandler.GetCopyData(System.Int32,System.Int32)">
            <summary>
            Gets the copy data for a specific segment inside the document. This can contain meta data about the text pasted.
            For example 'text pasted from string'.
            </summary>
            <param name = "offset">The copy offset.</param>
            <param name = "length">The length of the copied text.</param>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Extension.TextPasteHandler.PostFomatPastedText(System.Int32,System.Int32)">
            <summary>
            This is called after text was pasted. This is useful for creating an additional undo step for the paste command.
            </summary>
            <param name="offset">The offset the text was pasted at.</param>
            <param name="length">The length of the text pasted.</param>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Extension.TextEditorExtension.KeyPress(MonoDevelop.Ide.Editor.Extension.KeyDescriptor)">
            <summary>
            Return true if the key press should be processed by the editor.
            When a key is pressed, and before the key is processed by the editor, this method will be invoked.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.TextEditorViewContent">
            <summary>
            The TextEditor object needs to be available through BaseViewContent.GetContent therefore we need to insert a 
            decorator in between.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.DocumentLocation">
            <summary>
            A line/column position.
            Text editor lines/columns are counted started from one.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.DocumentLocation.Empty">
            <summary>
            Represents no text location (0, 0).
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.DocumentLocation.MinLine">
            <summary>
            Constant of the minimum line.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.DocumentLocation.MinColumn">
            <summary>
            Constant of the minimum column.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.DocumentLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a TextLocation instance.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.DocumentLocation.Line">
            <summary>
            Gets the line number.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.DocumentLocation.Column">
            <summary>
            Gets the column number.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.DocumentLocation.IsEmpty">
            <summary>
            Gets whether the TextLocation instance is empty.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.DocumentLocation.ToString">
            <summary>
            Gets a string representation for debugging purposes.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.DocumentLocation.GetHashCode">
            <summary>
            Gets a hash code.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.DocumentLocation.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.DocumentLocation.Equals(MonoDevelop.Ide.Editor.DocumentLocation)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.DocumentLocation.op_Equality(MonoDevelop.Ide.Editor.DocumentLocation,MonoDevelop.Ide.Editor.DocumentLocation)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.DocumentLocation.op_Inequality(MonoDevelop.Ide.Editor.DocumentLocation,MonoDevelop.Ide.Editor.DocumentLocation)">
            <summary>
            Inequality test.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.DocumentLocation.op_LessThan(MonoDevelop.Ide.Editor.DocumentLocation,MonoDevelop.Ide.Editor.DocumentLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.DocumentLocation.op_GreaterThan(MonoDevelop.Ide.Editor.DocumentLocation,MonoDevelop.Ide.Editor.DocumentLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.DocumentLocation.op_LessThanOrEqual(MonoDevelop.Ide.Editor.DocumentLocation,MonoDevelop.Ide.Editor.DocumentLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.DocumentLocation.op_GreaterThanOrEqual(MonoDevelop.Ide.Editor.DocumentLocation,MonoDevelop.Ide.Editor.DocumentLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.DocumentLocation.CompareTo(MonoDevelop.Ide.Editor.DocumentLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Highlighting.SemanticHighlighting">
            <summary>
            Semantic highlighting adds the ability to add highlighting for things that require
            a background parser to be colored. For example type names.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.SemanticHighlighting.GetColoredSegments(MonoDevelop.Core.Text.ISegment)">
            <summary>
            Colorize the specified offset, count and colorizeCallback.
            </summary>
            <param name="segment">The area to run the colorizer in.</param>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Highlighting.ColoredSegment">
            <summary>
            A colored segment is used in the highlighter to specify a color scheme style to a specfic part of text.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.ColoredSegment.ColorStyleKey">
            <summary>
            Gets the color style. The style is looked up in the current color scheme.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.HighlightedLine.Segments">
            <summary>
            The segment offsets are 0 at line start regardless of where the line is inside the document.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Highlighting.ISyntaxHighlighting">
            <summary>
            The basic interface for all syntax modes
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.ISyntaxHighlighting.GetHighlightedLineAsync(MonoDevelop.Ide.Editor.IDocumentLine,System.Threading.CancellationToken)">
            <summary>
            Gets colorized segments (aka chunks) from offset to offset + length.
            </summary>
            <param name='line'>
            The starting line at (offset). This is the same as Document.GetLineByOffset (offset).
            </param>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex">
            <devdoc>
               <para>
                  Represents an immutable, compiled regular expression. Also
                  contains static methods that allow use of regular expressions without instantiating
                  a Regex explicitly.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.#ctor(System.String)">
            <devdoc>
               <para>
                  Creates and compiles a regular expression object for the specified regular
                  expression.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.#ctor(System.String,MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions)">
            <devdoc>
               <para>
                  Creates and compiles a regular expression object for the
                  specified regular expression
                  with options that modify the pattern.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <internalonly/>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.ValidateMatchTimeout(System.TimeSpan)">
            <summary>
            Validates that the specified match timeout value is valid.
            The valid range is <code>TimeSpan.Zero &lt; matchTimeout &lt;= Regex.MaximumMatchTimeout</code>.
            </summary>
            <param name="matchTimeout">The timeout value to validate.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the specified timeout is not within a valid range.        
            </exception>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.InitDefaultMatchTimeout">
            <summary>
            Specifies the default RegEx matching timeout value (i.e. the timeout that will be used if no
            explicit timeout is specified).       
            The default is queried from the current <code>AppDomain</code> through <code>GetData</code> using
            the key specified in <code>Regex.DefaultMatchTimeout_ConfigKeyName</code>. For that key, the
            current <code>AppDomain</code> is expected to either return <code>null</code> or a <code>TimeSpan</code>
            value specifying the default timeout within a valid range.
            If the AddDomain's data value for that key is not a <code>TimeSpan</code> value or if it is outside the
            valid range, an exception is thrown which will result in a <code>TypeInitializationException</code> for RegEx.
            If the AddDomain's data value for that key is <code>null</code>, a fallback value is returned
            (see <code>FallbackDefaultMatchTimeout</code> in code).
            </summary>
            <returns>The default RegEx matching timeout for this AppDomain</returns>        
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Escape(System.String)">
            <devdoc>
               <para>
                  Escapes 
                     a minimal set of metacharacters (\, *, +, ?, |, {, [, (, ), ^, $, ., #, and
                     whitespace) by replacing them with their \ codes. This converts a string so that
                     it can be used as a constant within a regular expression safely. (Note that the
                     reason # and whitespace must be escaped is so the string can be used safely
                     within an expression parsed with x mode. If future Regex features add
                     additional metacharacters, developers should depend on Escape to escape those
                     characters as well.)
                  </para>
               </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Unescape(System.String)">
            <devdoc>
               <para>
                  Unescapes any escaped characters in the input string.
               </para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Options">
            <devdoc>
               <para>
                  Returns the options passed into the constructor
               </para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.MatchTimeout">
            <summary>
            The match timeout used by this Regex instance.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.RightToLeft">
            <devdoc>
               <para>
                  Indicates whether the regular expression matches from right to
                  left.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.ToString">
            <devdoc>
               <para>
                  Returns the regular expression pattern passed into the constructor
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.GetGroupNames">
            <devdoc>
               Returns 
                  the GroupNameCollection for the regular expression. This collection contains the
                  set of strings used to name capturing groups in the expression. 
               </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.GetGroupNumbers">
            <devdoc>
               returns 
                  the integer group number corresponding to a group name. 
               </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.GroupNameFromNumber(System.Int32)">
            <devdoc>
               <para>
                  Retrieves a group name that corresponds to a group number.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.GroupNumberFromName(System.String)">
            <devdoc>
               <para>
                  Returns a group number that corresponds to a group name.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.IsMatch(System.String,System.String)">
               <devdoc>
                  <para>
                     Searches the input 
                        string for one or more occurrences of the text supplied in the pattern
                        parameter.
                  </para>
               </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.IsMatch(System.String,System.String,MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions)">
            <devdoc>
               <para>
                  Searches the input string for one or more occurrences of the text 
                     supplied in the pattern parameter with matching options supplied in the options
                     parameter.
                  </para>
               </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.IsMatch(System.String)">
            <devdoc>
               <para>
                  Searches the input string for one or 
                     more matches using the previous pattern, options, and starting
                     position.
                  </para>
               </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.IsMatch(System.String,System.Int32)">
            <devdoc>
               <para>
                  Searches the input 
                     string for one or more matches using the previous pattern and options, with
                     a new starting position.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Match(System.String,System.String)">
               <devdoc>
                  <para>
                     Searches the input string for one or more occurrences of the text 
                        supplied in the pattern parameter.
                  </para>
               </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Match(System.String,System.String,MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions)">
            <devdoc>
               <para>
                  Searches the input string for one or more occurrences of the text 
                     supplied in the pattern parameter. Matching is modified with an option
                     string.
                  </para>
               </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Match(System.String)">
            <devdoc>
               <para>
                  Matches a regular expression with a string and returns
                  the precise result as a RegexMatch object.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Match(System.String,System.Int32)">
            <devdoc>
               Matches a regular expression with a string and returns
               the precise result as a RegexMatch object.
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Match(System.String,System.Int32,System.Int32)">
            <devdoc>
               <para>
                  Matches a
                  regular expression with a string and returns the precise result as a
                  RegexMatch object.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Matches(System.String,System.String)">
               <devdoc>
                  <para>
                     Returns all the successful matches as if Match were
                     called iteratively numerous times.
                  </para>
               </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Matches(System.String,System.String,MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions)">
            <devdoc>
               <para>
                  Returns all the successful matches as if Match were called iteratively
                  numerous times.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Matches(System.String)">
            <devdoc>
               <para>
                  Returns
                  all the successful matches as if Match was called iteratively numerous
                  times.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Matches(System.String,System.Int32)">
            <devdoc>
               <para>
                  Returns
                  all the successful matches as if Match was called iteratively numerous
                  times.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Replace(System.String,System.String,System.String)">
            <devdoc>
               <para>
                  Replaces 
                     all occurrences of the pattern with the <paramref name="replacement"/> pattern, starting at
                     the first character in the input string. 
                  </para>
               </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Replace(System.String,System.String,System.String,MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions)">
            <devdoc>
               <para>
                  Replaces all occurrences of 
                     the <paramref name="pattern "/>with the <paramref name="replacement "/>
                     pattern, starting at the first character in the input string. 
                  </para>
               </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Replace(System.String,System.String)">
            <devdoc>
               <para>
                  Replaces all occurrences of 
                     the <paramref name="input "/> with the <paramref name="replacement"/> pattern, starting at the
                     first character in the input string, using the previous patten. 
                  </para>
               </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Replace(System.String,System.String,System.Int32)">
            <devdoc>
               <para>
               Replaces all occurrences of the (previously defined) <paramref name="input "/>with the 
               <paramref name="replacement"/> pattern, starting at the first character in the input string. 
            </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
            <devdoc>
               <para>
               Replaces all occurrences of the <paramref name="input "/>with the recent 
               <paramref name="replacement"/> pattern, starting at the character position 
               <paramref name="startat"/>
            </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Split(System.String,System.String)">
               <devdoc>
                  <para>
                     Splits the <paramref name="input "/>string at the position defined
                     by <paramref name="pattern"/>.
                  </para>
               </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.Split(System.String,System.String,MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions)">
            <devdoc>
               <para>
                  Splits the <paramref name="input "/>string at the position defined by <paramref name="pattern"/>.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.CompileToAssembly(MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexCompilationInfo[],System.Reflection.AssemblyName)">
            <devdoc>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.CompileToAssembly(MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])">
            <devdoc>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.InitializeReferences">
            <devdoc>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.UseOptionC">
            <internalonly/>
            <devdoc>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex.UseOptionR">
            <internalonly/>
            <devdoc>
            </devdoc>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.MatchEvaluator">
            <devdoc>
            </devdoc>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Capture">
            <devdoc>
               <para> 
                  Represents the results from a single subexpression capture. The object represents
                  one substring for a single successful capture.</para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Capture.Index">
            <devdoc>
               <para>Returns the position in the original string where the first character of
                  captured substring was found.</para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Capture.Length">
            <devdoc>
               <para>
                  Returns the length of the captured substring.
               </para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Capture.Value">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Capture.ToString">
            <devdoc>
               <para>
                  Returns 
                     the substring that was matched.
                  </para>
               </devdoc>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.CaptureCollection">
            <devdoc>
               <para>
                  Represents a sequence of capture substrings. The object is used
                  to return the set of captures done by a single capturing group.
               </para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.CaptureCollection.SyncRoot">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.CaptureCollection.IsSynchronized">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.CaptureCollection.IsReadOnly">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.CaptureCollection.Count">
            <devdoc>
               <para>
                  Returns the number of captures.
               </para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.CaptureCollection.Item(System.Int32)">
            <devdoc>
               <para>
                  Provides a means of accessing a specific capture in the collection.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.CaptureCollection.CopyTo(System.Array,System.Int32)">
            <devdoc>
               <para>
                  Copies all the elements of the collection to the given array
                  beginning at the given index.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.CaptureCollection.GetEnumerator">
            <devdoc>
               <para>
                  Provides an enumerator in the same order as Item[].
               </para>
            </devdoc>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexCompilationInfo">
            <devdoc>
               <para>
                  [To be supplied]
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexCompilationInfo.#ctor(System.String,MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions,System.String,System.String,System.Boolean)">
            <devdoc>
               <para>
                  [To be supplied]
               </para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexCompilationInfo.Pattern">
            <devdoc>
               <para>
                  [To be supplied]
               </para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexCompilationInfo.Options">
            <devdoc>
               <para>
                  [To be supplied]
               </para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexCompilationInfo.Name">
            <devdoc>
               <para>
                  [To be supplied]
               </para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexCompilationInfo.Namespace">
            <devdoc>
               <para>
                  [To be supplied]
               </para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexCompilationInfo.IsPublic">
            <devdoc>
               <para>
                  [To be supplied]
               </para>
            </devdoc>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Group">
            <devdoc>
               Group 
                  represents the results from a single capturing group. A capturing group can
                  capture zero, one, or more strings in a single match because of quantifiers, so
                  Group supplies a collection of Capture objects. 
               </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Group.Success">
            <devdoc>
               <para>Indicates whether the match is successful.</para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Group.Captures">
            <devdoc>
               <para>
                  Returns a collection of all the captures matched by the capturing
                  group, in innermost-leftmost-first order (or innermost-rightmost-first order if
                  compiled with the "r" option). The collection may have zero or more items.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Group.Synchronized(MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Group)">
            <devdoc>
               <para>Returns 
                  a Group object equivalent to the one supplied that is safe to share between
                  multiple threads.</para>
            </devdoc>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.GroupCollection">
            <devdoc>
               <para>
                  Represents a sequence of capture substrings. The object is used
                  to return the set of captures done by a single capturing group.
               </para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.GroupCollection.SyncRoot">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.GroupCollection.IsSynchronized">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.GroupCollection.IsReadOnly">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.GroupCollection.Count">
            <devdoc>
               <para>
                  Returns the number of groups.
               </para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.GroupCollection.Item(System.Int32)">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.GroupCollection.Item(System.String)">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.GroupCollection.CopyTo(System.Array,System.Int32)">
            <devdoc>
               <para>
                  Copies all the elements of the collection to the given array
                  beginning at the given index.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.GroupCollection.GetEnumerator">
            <devdoc>
               <para>
                  Provides an enumerator in the same order as Item[].
               </para>
            </devdoc>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Match">
            <devdoc>
               <para>
                  Represents 
                     the results from a single regular expression match.
                  </para>
               </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Match.Empty">
            <devdoc>
               <para>
                  Returns an empty Match object.
               </para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Match.Groups">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Match.NextMatch">
            <devdoc>
               <para>Returns a new Match with the results for the next match, starting
                  at the position at which the last match ended (at the character beyond the last
                  matched character).</para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Match.Result(System.String)">
            <devdoc>
               <para>
                  Returns the expansion of the passed replacement pattern. For
                  example, if the replacement pattern is ?$1$2?, Result returns the concatenation
                  of Group(1).ToString() and Group(2).ToString().
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Match.Synchronized(MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Match)">
            <devdoc>
               <para>
                  Returns a Match instance equivalent to the one supplied that is safe to share
                  between multiple threads.
               </para>
            </devdoc>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.MatchCollection">
            <devdoc>
               <para>
                  Represents the set of names appearing as capturing group
                  names in a regular expression.
               </para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.MatchCollection.Count">
            <devdoc>
               <para>
                  Returns the number of captures.
               </para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.MatchCollection.SyncRoot">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.MatchCollection.IsSynchronized">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.MatchCollection.IsReadOnly">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.MatchCollection.Item(System.Int32)">
            <devdoc>
               <para>
                  Returns the ith Match in the collection.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.MatchCollection.CopyTo(System.Array,System.Int32)">
            <devdoc>
               <para>
                  Copies all the elements of the collection to the given array
                  starting at the given index.
               </para>
            </devdoc>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.MatchCollection.GetEnumerator">
            <devdoc>
               <para>
                  Provides an enumerator in the same order as Item[i].
               </para>
            </devdoc>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexMatchTimeoutException">
            <summary>
            This is the exception that is thrown when a RegEx matching timeout occurs.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexMatchTimeoutException.#ctor(System.String,System.String,System.TimeSpan)">
            <summary>
            This is the preferred constructor to use.
            The other constructors are provided for compliance to Fx design guidelines.
            </summary>
            <param name="regexInput">Matching timeout occurred during mathing within the specified input.</param>
            <param name="regexPattern">Matching timeout occurred during mathing to the specified pattern.</param>
            <param name="matchTimeout">Matching timeout occurred becasue matching took longer than the specified timeout.</param>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexMatchTimeoutException.#ctor">
            <summary>
            This constructor is provided in compliance with common NetFx design patterns;
            developers should prefer using the constructor
            <code>public RegexMatchTimeoutException(string input, string pattern, TimeSpan matchTimeout)</code>.
            </summary>    
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexMatchTimeoutException.#ctor(System.String)">
            <summary>
            This constructor is provided in compliance with common NetFx design patterns;
            developers should prefer using the constructor
            <code>public RegexMatchTimeoutException(string input, string pattern, TimeSpan matchTimeout)</code>.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexMatchTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            This constructor is provided in compliance with common NetFx design patterns;
            developers should prefer using the constructor
            <code>public RegexMatchTimeoutException(string input, string pattern, TimeSpan matchTimeout)</code>.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a <code>null</code>.</param>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexMatchTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new RegexMatchTimeoutException with serialized data.
            </summary>
            <param name="info">The SerializationInfo  that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext  that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions.None">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions.IgnoreCase">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions.Multiline">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions.ExplicitCapture">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions.Compiled">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions.Singleline">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions.IgnorePatternWhitespace">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions.RightToLeft">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions.ECMAScript">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexOptions.CultureInvariant">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexRunner">
            <internalonly/>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Highlighting.RegexEngine.RegexRunnerFactory">
            <internalonly/>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.InsertionModeOptions">
            <summary>
            This class contains information the editor needs to initiate the insertion mode.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.InsertionModeOptions.Operation">
            <summary>
            A user visible string describing this operation.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.InsertionModeOptions.InsertionPoints">
            <summary>
            The list of insertion points that are used for the insertion mode. The caret is only able to move between
            the insertion points.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.InsertionModeOptions.ModeExitedAction">
            <summary>
            That's the action that is started after the insertion mode ended.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.InsertionModeOptions.FirstSelectedInsertionPoint">
            <summary>
            Gets or sets the first selected insertion point. The default value is 0.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.InsertionModeOptions.#ctor(System.String,System.Collections.Generic.IList{MonoDevelop.Ide.Editor.InsertionPoint},System.Action{MonoDevelop.Ide.Editor.InsertionCursorEventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoDevelop.Ide.Editor.InsertionModeOptions"/> class.
            </summary>
            <param name="operation">A user visible string describing this operation.</param>
            <param name="insertionPoints">The list of insertion points that are used for the insertion mode.</param>
            <param name="modeExitedAction">The action that is started after the exit mode ended.</param>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.TextLinkModeOptions">
            <summary>
            This class contains information the editor needs to initiate the text link mode.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.TextLinkModeOptions.Links">
            <summary>
            The text links. Note that this property will change to IReadOnlyList in future versions.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.TextLinkModeOptions.ModeExitedAction">
            <summary>
            That's the action that is started after the text link mode ended.
            This may be null (in that case no action is started). 
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.TextLinkModeOptions.#ctor(System.Collections.Generic.IList{MonoDevelop.Ide.Editor.TextLink},System.Action{MonoDevelop.Ide.Editor.TextLinkModeEventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoDevelop.Ide.Editor.TextLinkModeOptions"/> class.
            </summary>
            <param name="links">The text links. </param>
            <param name="modeExitedAction">That's the action that is started after the text link mode ended.</param>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.TextMarkerFactory">
            <summary>
            The text marker factory creates line and segment markers for the text editor.
            Note that this is the only valid way of creating markers for the editor.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.ITextEditorImpl.AddMarker(MonoDevelop.Ide.Editor.ITextSegmentMarker)">
            <summary>
            Adds a marker to the document.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.ITextEditorImpl.RemoveMarker(MonoDevelop.Ide.Editor.ITextSegmentMarker)">
            <summary>
            Removes a marker from the document.
            </summary>
            <returns><c>true</c>, if marker was removed, <c>false</c> otherwise.</returns>
            <param name="marker">Marker.</param>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.EditActions">
            <summary>
            This class contains some common actions for the text editor.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.DocumentContext">
            <summary>
            A document context puts a textual document in a semantic context inside a project and gives access
            to the parse information of the textual document.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.DocumentContext.Name">
            <summary>
            The name of the document. It's the file name for files on disc. 
            For unsaved files that name is different.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.DocumentContext.HasProject">
            <summary>
            Project != null
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.DocumentContext.Project">
            <summary>
            Gets the project this context is in.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.DocumentContext.IsUntitled">
            <summary>
            Determine if the file has already saved on disk. Untitled files are open
            in the IDE only. After the first save the file is no longer untitled.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.DocumentContext.AnalysisDocument">
            <summary>
            Returns the roslyn document for this document. This may return <c>null</c> if it's no compileable document.
            Even if it's a C# file. Is always not <c>null</c> when the parser returns <c>true</c> on CanGenerateAnalysisDocument.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.DocumentContext.ParsedDocument">
            <summary>
            The parsed document. Contains all syntax information about the text.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.DocumentContext.IsCompileableInProject">
            <summary>
            If true, the document is part of the ProjectContent.
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.Editor.DocumentContext.DocumentParsed">
            <summary>
            This is called after the ParsedDocument updated.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.DocumentContext.ReparseDocument">
            <summary>
            Forces a reparse of the document. This call doesn't block the ui thread. 
            The next call to ParsedDocument will give always the current parsed document but may block the UI thread.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.IReadonlyTextDocument.LineCount">
            <summary>
            Gets the number of lines in the document.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.ReadonlyTextDocumentExtensions.GetTextAt(MonoDevelop.Ide.Editor.IReadonlyTextDocument,MonoDevelop.Core.Text.ISegment)">
            <summary>
            Retrieves the text for a portion of the document.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.AutoSave">
            <summary>
            This class handles the auto save mechanism for open files.
            It should only be used by editor implementations.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.AutoSave.AutoSaveExists(System.String)">
            <summary>
            Returns true if an auto save exists for the given file name.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.AutoSave.LoadAndRemoveAutoSave(System.String)">
            <summary>
            Loads the content from an auto save file and removes the auto save file.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.AutoSave.LoadAutoSave(System.String)">
            <summary>
            Loads the content from an auto save file.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.AutoSave.RemoveAutoSaveFile(System.String)">
            <summary>
            Removes the auto save file.
            </summary>
            <param name="fileName">The file name for which the auto save file should be removed.</param>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.SegmentTree`1">
            <summary>
            A segment tree contains overlapping segments and get all segments overlapping a segment. It's implemented as a augmented interval tree
            described in Cormen et al. (2001, Section 14.3: Interval trees, pp. 311–317).
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Util.DiffHunk">
            <summary>
            A DiffHunk represents a single change in a diff between two files.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Util.DiffHunk.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.Util.DiffHunk.InsertStart">
            <summary>
            Line number where the insertion starts.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.Util.DiffHunk.RemoveStart">
            <summary>
            Line number where the removal starts.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.Util.DiffHunk.Removed">
            <summary>
            Number of lines removed.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.Util.DiffHunk.Inserted">
            <summary>
            Number of lines inserted.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Util.Diff.SMSRD">
            <summary>
            Shortest Middle Snake Return Data
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Util.Diff.CreateDiffs``1(MonoDevelop.Ide.Editor.Util.DiffData{``0},MonoDevelop.Ide.Editor.Util.DiffData{``0})">
            <summary>Scan the tables of which lines are inserted and deleted,
            producing an edit script in forward order.
            </summary>
            dynamic array
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Util.Diff.SMS``1(MonoDevelop.Ide.Editor.Util.DiffData{``0},System.Int32,System.Int32,MonoDevelop.Ide.Editor.Util.DiffData{``0},System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            This is the algorithm to find the Shortest Middle Snake (SMS).
            </summary>
            <param name="dataA">sequence A</param>
            <param name="lowerA">lower bound of the actual range in DataA</param>
            <param name="upperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="dataB">sequence B</param>
            <param name="lowerB">lower bound of the actual range in DataB</param>
            <param name="upperB">upper bound of the actual range in DataB (exclusive)</param>
            <param name="downVector">a vector for the (0,0) to (x,y) search. Passed as a parameter for speed reasons.</param>
            <param name="upVector">a vector for the (u,v) to (N,M) search. Passed as a parameter for speed reasons.</param>
            <returns>a MiddleSnakeData record containing x,y and u,v</returns>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Util.Diff.LCS``1(MonoDevelop.Ide.Editor.Util.DiffData{``0},System.Int32,System.Int32,MonoDevelop.Ide.Editor.Util.DiffData{``0},System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            This is the divide-and-conquer implementation of the longest common-subsequence (LCS)
            algorithm.
            The published algorithm passes recursively parts of the A and B sequences.
            To avoid copying these arrays the lower and upper bounds are passed while the sequences stay constant.
            </summary>
            <param name="dataA">sequence A</param>
            <param name="lowerA">lower bound of the actual range in DataA</param>
            <param name="upperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="dataB">sequence B</param>
            <param name="lowerB">lower bound of the actual range in DataB</param>
            <param name="upperB">upper bound of the actual range in DataB (exclusive)</param>
            <param name="downVector">a vector for the (0,0) to (x,y) search. Passed as a parameter for speed reasons.</param>
            <param name="upVector">a vector for the (u,v) to (N,M) search. Passed as a parameter for speed reasons.</param>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Util.DiffData`1">
            <summary>Data on one input file being compared.
            </summary>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.Util.DiffData`1.Length">
            <summary>Number of elements (lines).</summary>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.Util.DiffData`1.Data">
            <summary>Buffer of numbers that will be compared.</summary>
        </member>
        <member name="F:MonoDevelop.Ide.Editor.Util.DiffData`1.Modified">
            <summary>
            Array of booleans that flag for modified data.
            This is the result of the diff.
            This means deletedA in the first Data or inserted in the second Data.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Util.DiffData`1.#ctor(`0[])">
            <summary>
            Initialize the Diff-Data buffer.
            </summary>
            <param name="initData">reference to the buffer</param>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument">
            <summary>
            A simple and fast implementation for a read only text document.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.CreateReadonlyDocumentAsync(MonoDevelop.Core.Text.ITextSource,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a new readonly document. Note that the text source is not copied - it needs to be read only.
            </summary>
            <returns>The readonly document async.</returns>
            <param name="readOnlyTextSource">Read only text source.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.LocationToOffset(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.OffsetToLocation(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.GetLine(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.GetLineByOffset(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.FileName">
            <inheritdoc/>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.MimeType">
            <inheritdoc/>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.LineCount">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.GetCharAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.GetTextAt(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.CreateReader">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.CreateReader(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.WriteTextTo(System.IO.TextWriter)">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.WriteTextTo(System.IO.TextWriter,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.Version">
            <inheritdoc/>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.Encoding">
            <inheritdoc/>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.Length">
            <inheritdoc/>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.Text">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.Util.SimpleReadonlyDocument.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.SkipCharSession">
            <summary>
            Reassembles the old skip char system - shouldn't be used by new features anymore.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.TextMate.IDocumentIndentEngine.ThisLineIndent">
            <summary>
                The indentation string of the current line.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.TextMate.IDocumentIndentEngine.NextLineIndent">
            <summary>
                The indentation string of the next line.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.TextMate.IDocumentIndentEngine.LineNumber">
            <summary>
                The current line number of the engine.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.TextMate.IDocumentIndentEngine.Reset">
            <summary>
                Resets the engine.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.Editor.TextMate.CacheIndentEngine">
            <summary>
                Represents a decorator of an IStateMachineIndentEngine instance that provides
                logic for reseting and updating the engine on text changed events.
            </summary>
            <remarks>
                The decorator is based on periodical caching of the engine's state and
                delegating all logic behind indentation to the currently active engine.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.TextMate.CacheIndentEngine.#ctor(MonoDevelop.Ide.Editor.TextMate.IDocumentIndentEngine,System.Int32)">
            <summary>
                Creates a new CacheIndentEngine instance.
            </summary>
            <param name="decoratedEngine">
                An instance of <see cref="T:MonoDevelop.Ide.Editor.TextMate.IDocumentIndentEngine"/> to which the
                logic for indentation will be delegated.
            </param>
            <param name="cacheRate">
                The number of lines between caching.
            </param>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.TextMate.CacheIndentEngine.#ctor(MonoDevelop.Ide.Editor.TextMate.CacheIndentEngine)">
            <summary>
                Creates a new CacheIndentEngine instance from the given prototype.
            </summary>
            <param name="prototype">
                A CacheIndentEngine instance.
            </param>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.TextMate.CacheIndentEngine.ThisLineIndent">
            <inheritdoc />
        </member>
        <member name="P:MonoDevelop.Ide.Editor.TextMate.CacheIndentEngine.NextLineIndent">
            <inheritdoc />
        </member>
        <member name="P:MonoDevelop.Ide.Editor.TextMate.CacheIndentEngine.LineNumber">
            <inheritdoc />
        </member>
        <member name="P:MonoDevelop.Ide.Editor.TextMate.CacheIndentEngine.CurrentIndent">
            <inheritdoc />
        </member>
        <member name="M:MonoDevelop.Ide.Editor.TextMate.CacheIndentEngine.Push(MonoDevelop.Ide.Editor.IReadonlyTextDocument,MonoDevelop.Ide.Editor.IDocumentLine)">
            <inheritdoc />
        </member>
        <member name="M:MonoDevelop.Ide.Editor.TextMate.CacheIndentEngine.Reset">
            <inheritdoc />
        </member>
        <member name="M:MonoDevelop.Ide.Editor.TextMate.CacheIndentEngine.ResetEngineToPosition(System.Int32)">
            <summary>
            Resets the engine to offset. Clears all cached engines after the given offset.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.Editor.TextMate.CacheIndentEngine.Update(MonoDevelop.Ide.Editor.IReadonlyTextDocument,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MonoDevelop.Ide.Editor.TextMate.CacheIndentEngine.Clone">
            <inheritdoc />
        </member>
        <member name="M:MonoDevelop.Ide.Editor.TextMate.TextMateDocumentIndentEngine.#ctor(MonoDevelop.Ide.Editor.TextEditor,MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex,MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex,MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex,MonoDevelop.Ide.Editor.Highlighting.RegexEngine.Regex)">
            <summary>
            For unit testing.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.Editor.TooltipWindowOptions.AutoClose">
            <summary>
            Gets or sets a value indicating whether this tooltip should close automatically on mouse hover.
            </summary>
            <value><c>true</c> if auto close; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MonoDevelop.Ide.GettingStarted.GettingStarted.ShowGettingStarted(MonoDevelop.Projects.Project,System.String)">
            <summary>
            Shows the getting started page for the given project.
            </summary>
            <param name="project">The project for which the getting started page should be shown</param>
            <param name="pageHint">A hint to the getting started page for cases when the provide may need assistance in determining the correct content to show</param>
        </member>
        <member name="P:MonoDevelop.Ide.BuildOutputView.BuildOutputDataSearch.CurrentAbsoluteMatchIndex">
            <summary>
            This is the relative index position from 1 to MatchesCount
            </summary>
            <value>The current position.</value>
        </member>
        <member name="P:MonoDevelop.Ide.BuildOutputView.BuildOutputDataSearch.AllMatches">
            <summary>
            Gets all matches.
            </summary>
            <value>All matches.</value>
        </member>
        <member name="P:MonoDevelop.Ide.BuildOutputView.BuildOutputDataSearch.MatchesCount">
            <summary>
            Gets the matches count. 
            </summary>
            <value>The matches count.</value>
        </member>
        <member name="P:MonoDevelop.Ide.BuildOutputView.BuildOutputDataSearch.SearchWrapped">
            <summary>
            Gets a value indicating whether this <see cref="T:MonoDevelop.Ide.BuildOutputView.BuildOutputDataSource"/> search is wrapped.
            </summary>
            <value><c>true</c> if search wrapped; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MonoDevelop.Ide.RoslynServices.MonoDevelopDocumentTrackingService.GetActiveDocument">
            <summary>
            Get the <see cref="T:Microsoft.CodeAnalysis.DocumentId"/> of the active document. May be called from any thread.
            May return null if there is no active document or the active document is not part of this
            workspace.
            </summary>
            <returns>The ID of the active document (if any)</returns>
        </member>
        <member name="M:MonoDevelop.Ide.RoslynServices.MonoDevelopDocumentTrackingService.GetVisibleDocuments">
            <summary>
            Get a read only collection of the <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s of all the visible documents in the workspace.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.RoslynServices.MonoDevelopWorkspaceCacheService.FlushCaches">
            <summary>
            Called by the host to try and reduce memory occupied by caches.
            </summary>
        </member>
        <member name="E:MonoDevelop.Ide.RoslynServices.MonoDevelopWorkspaceCacheService.CacheFlushRequested">
            <summary>
            Raised by the host when available memory is getting low in order to request that caches be flushed.
            </summary>
        </member>
        <member name="T:MonoDevelop.Ide.RoslynServices.Options.MonoDevelopGlobalOptionPersister">
            <summary>
            Handles options persisting and bridging between roslyn and MonoDevelop.
            </summary>
        </member>
        <member name="M:MonoDevelop.Ide.RoslynServices.Options.RoslynPreferences.Wrap``1(Microsoft.CodeAnalysis.Options.OptionKey,System.String)">
            <summary>
            Wrap the specified <see cref="T:Microsoft.CodeAnalysis.Options.IOption"/> using its default value, optionally migrating an old <see cref="T:MonoDevelop.Core.ConfigurationProperty`1"/>.
            This is a two-way binding of a property, both update sources (roslyn, IDE) update the other.
            The key for the property is computed by the underlying option's <see cref="T:Microsoft.CodeAnalysis.Options.OptionStorageLocation"/>s.
            </summary>
            <returns>The configuration property.</returns>
            <param name="optionKey">Roslyn option.</param>
            <param name="monodevelopPropertyName">The property name to migrate from.</param>
            <typeparam name="T">The property type</typeparam>
        </member>
        <member name="M:MonoDevelop.Ide.RoslynServices.Options.RoslynPreferences.Wrap``1(Microsoft.CodeAnalysis.Options.OptionKey,``0,System.String)">
            <summary>
            Wrap the specified <see cref="T:Microsoft.CodeAnalysis.Options.IOption"/> using its default value, optionally migrating an old <see cref="T:MonoDevelop.Core.ConfigurationProperty`1"/>.
            This is a two-way binding of a property, both update sources (roslyn, IDE) update the other.
            The key for the property is computed by the underlying option's <see cref="T:Microsoft.CodeAnalysis.Options.OptionStorageLocation"/>s.
            </summary>
            <returns>The configuration property.</returns>
            <param name="optionKey">Roslyn option.</param>
            <param name="defaultValue">The overridden default value.</param>
            <param name="monodevelopPropertyName">The property name to migrate from.</param>
            <typeparam name="T">The property type</typeparam>
        </member>
        <member name="P:MonoDevelop.Ide.RoslynServices.MonoDevelopNotificationServiceFactory.MonoDevelopNotificationService.NotificationCallback">
            <summary>
            For testing purposes only.  If non-null, this callback will be invoked instead of showing a dialog.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.ProductInformationProvider.ApplicationId">
            <summary>
            Application ID used by the updater. Usually a GUID.
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.ProductInformationProvider.Version">
            <summary>
            Human readable version number
            </summary>
        </member>
        <member name="P:MonoDevelop.Ide.ProductInformationProvider.UpdateInfoFile">
            <summary>
            Path to the updateinfo file.
            </summary>
            <remarks>Relative paths may be specified here. Relative paths need to be relative to the bundle root.</remarks>
        </member>
        <member name="T:MonoDevelop.Components.InfoBar">
            <summary>
            Widget for displaying an informational non-modal question or message at the top of a content area.
            Very loosely modelled on the GTK+ 2.18 InfoBar widget.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.GtkUtil.AddLight(Gdk.Color,System.Double)">
            <summary>
            Makes a color lighter or darker
            </summary>
            <param name='lightAmount'>
            Amount of lightness to add. If the value is positive, the color will be lighter,
            if negative it will be darker. Value must be between 0 and 1.
            </param>
        </member>
        <member name="M:MonoDevelop.Components.GtkUtil.AddLight(MonoDevelop.Components.HslColor,System.Double)">
            <summary>
            Makes a color lighter or darker
            </summary>
            <param name='lightAmount'>
            Amount of lightness to add. If the value is positive, the color will be lighter,
            if negative it will be darker. Value must be between 0 and 1.
            </param>
        </member>
        <member name="M:MonoDevelop.Components.GtkUtil.AddLight(Xwt.Drawing.Color,System.Double)">
            <summary>
            Makes a color lighter or darker
            </summary>
            <param name='lightAmount'>
            Amount of lightness to add. If the value is positive, the color will be lighter,
            if negative it will be darker. Value must be between 0 and 1.
            </param>
        </member>
        <member name="M:MonoDevelop.Components.GtkUtil.SubscribeLeaveEvent(Gtk.Widget,System.Action)">
            <summary>
            This method can be used to get a reliave Leave event for a widget, which
            is not fired if the pointer leaves the widget to enter a child widget.
            To ubsubscribe the event, dispose the object returned by the method.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.GtkUtil.ShowContextMenu(Gtk.TreeView,Gdk.EventButton,MonoDevelop.Components.Commands.CommandEntrySet,System.Object)">
            <summary>
            Shows the context menu for a TreeView.
            </summary>
            <returns><c>true</c>, if context menu was shown, <c>false</c> otherwise.</returns>
            <param name="tree">Gtk TreeView for which the context menu is shown</param>
            <param name="evt">The current mouse event, or <c>null</c>.</param>
            <param name="entrySet">Entry set with the command definitions</param>
            <param name="initialCommandTarget">Initial command target.</param>
        </member>
        <member name="T:MonoDevelop.Components.SelectFileDialog">
            <summary>
            Dialog which can be used to select a file for opening or saving
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.SelectFolderDialog">
            <summary>
            Dialog which can be used to select a folder
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandHandler.Run">
            <summary>
            Runs this command.
            </summary>
            <remarks>This method will be executed when the command is dispatched.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandHandler.Run(System.Object)">
            <summary>
            Runs this command (for array commands)
            </summary>
            <param name="dataItem">Context data</param>
            <remarks>This method will be executed when the command is dispatched.
            </remarks>
            
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandHandler.Update(MonoDevelop.Components.Commands.CommandInfo)">
            <summary>
            Updates the status of the command
            </summary>
            <param name="info">Information instance where to set the status of the command</param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.LoadCommands(System.String)">
            <summary>
            Loads command definitions from the provided extension path
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.LoadKeyBindingSchemes(System.String)">
            <summary>
            Loads key binding schemes from the provided extension path
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.CreateMenuBar(System.String)">
            <summary>
            Creates a menu bar from the menu definition at the provided extension path
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.CreateMenu(System.String)">
            <summary>
            Creates a menu from the provided extension path
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.ShowContextMenu(MonoDevelop.Components.Control,Gdk.EventButton,System.String)">
            <summary>
            Shows a context menu.
            </summary>
            <param name='parent'>
            Widget for which the context menu is being shown
            </param>
            <param name='evt'>
            Current event object
            </param>
            <param name='addinPath'>
            Extension path to the definition of the menu
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.ShowContextMenu(MonoDevelop.Components.Control,Gdk.EventButton,Mono.Addins.ExtensionContext,System.String)">
            <summary>
            Shows a context menu.
            </summary>
            <param name='parent'>
            Widget for which the context menu is being shown
            </param>
            <param name='evt'>
            Current event object
            </param>
            <param name='ctx'>
            Extension context to use to query the extension path
            </param>
            <param name='addinPath'>
            Extension path to the definition of the menu
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.CreateCommandEntrySet(Mono.Addins.ExtensionContext,System.String)">
            <summary>
            Creates a command entry set.
            </summary>
            <returns>
            The command entry set.
            </returns>
            <param name='ctx'>
            Extension context to use to query the extension path
            </param>
            <param name='addinPath'>
            Extension path with the command definitions
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.CreateCommandEntrySet(System.String)">
            <summary>
            Creates a command entry set.
            </summary>
            <returns>
            The command entry set.
            </returns>
            <param name='addinPath'>
            Extension path with the command definitions
            </param>
        </member>
        <member name="P:MonoDevelop.Components.Commands.CommandManager.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the command manager is enabled. When disabled, all commands are disabled.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.Commands.CommandManager.CurrentCommand">
            <summary>
            The command currently being executed or for which the status is being checked
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.SetRootWindow(MonoDevelop.Components.Window)">
            <summary>
            Sets the root window. The manager will start the command route at this window, if no other is active.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.LockAll">
            <summary>
            Disables all commands
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.UnlockAll">
            <summary>
            Unlocks the command manager
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.Commands.CommandManager.EnableIdleUpdate">
            <summary>
            When set to true, the toolbar status will be updated periodically while the gui is idle.
            idle update.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.RegisterCommand(MonoDevelop.Components.Commands.Command)">
            <summary>
            Registers a new command.
            </summary>
            <param name='cmd'>
            The command.
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.UnregisterCommand(MonoDevelop.Components.Commands.Command)">
            <summary>
            Unregisters a command.
            </summary>
            <param name='cmd'>
            The command.
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.LoadUserBindings">
            <summary>
            Loads user defined key bindings.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.RegisterGlobalHandler(System.Object)">
            <summary>
            Registers a global command handler.
            </summary>
            <param name='handler'>
            The handler
            </param>
            <remarks>
            Global command handler are added to the end of the command route.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.UnregisterGlobalHandler(System.Object)">
            <summary>
            Unregisters a global handler.
            </summary>
            <param name='handler'>
            The handler.
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.RegisterCommandTargetVisitor(MonoDevelop.Components.Commands.ICommandTargetVisitor)">
            <summary>
            Registers a command target visitor.
            </summary>
            <param name='visitor'>
            The visitor.
            </param>
            <remarks>
            Command target visitors can be used to visit the whole active command route
            to perform custom actions on the objects of the route. The command manager
            periodically visits the command route. The visit frequency varies, but it
            is usually at least once a second.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.UnregisterCommandTargetVisitor(MonoDevelop.Components.Commands.ICommandTargetVisitor)">
            <summary>
            Unregisters a command target visitor.
            </summary>
            <param name='visitor'>
            The visitor.
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.GetCommand(System.Object)">
            <summary>
            Gets a registered command.
            </summary>
            <returns>
            The command.
            </returns>
            <param name='cmdId'>
            The identifier of the command
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.GetCommands">
            <summary>
            Gets all registered commands
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.GetActionCommand(System.Object)">
            <summary>
            Gets an action command.
            </summary>
            <returns>
            The action command.
            </returns>
            <param name='cmdId'>
            The command identifier.
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.GetCommands(MonoDevelop.Components.Commands.KeyBinding)">
            <summary>
            Gets all registered commands with the specified binding
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.CreateMenuBar(System.String,MonoDevelop.Components.Commands.CommandEntrySet)">
            <summary>
            Creates a menu bar.
            </summary>
            <returns>
            The menu bar.
            </returns>
            <param name='name'>
            Unused
            </param>
            <param name='entrySet'>
            Entry set with the definition of the commands to be included in the menu bar
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.CreateMenu(MonoDevelop.Components.Commands.CommandEntrySet,MonoDevelop.Components.Commands.CommandMenu)">
            <summary>
            Appends commands to a menu
            </summary>
            <returns>
            The menu.
            </returns>
            <param name='entrySet'>
            Entry set with the command definitions
            </param>
            <param name='menu'>
            The menu where to add the commands
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.CreateMenu(MonoDevelop.Components.Commands.CommandEntrySet)">
            <summary>
            Creates a menu.
            </summary>
            <returns>
            The menu.
            </returns>
            <param name='entrySet'>
            Entry with the command definitions
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.CreateMenu(MonoDevelop.Components.Commands.CommandEntrySet,System.EventHandler)">
            <summary>
            Creates a menu.
            </summary>
            <returns>
            The menu.
            </returns>
            <param name='entrySet'>
            Entry with the command definitions
            </param>
            <param name='closeHandler'>
            EventHandler to be run when the menu closes
            </param> 
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.CreateMenu(MonoDevelop.Components.Commands.CommandEntrySet,System.Object)">
            <summary>
            Creates the menu.
            </summary>
            <returns>
            The menu.
            </returns>
            <param name='entrySet'>
            Entry with the command definitions
            </param>
            <param name='initialTarget'>
            Initial command route target. The command handler will start looking for command handlers in this object.
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.CreateMenu(MonoDevelop.Components.Commands.CommandEntrySet,System.Object,System.EventHandler)">
            <summary>
            Creates the menu.
            </summary>
            <returns>
            The menu.
            </returns>
            <param name='entrySet'>
            Entry with the command definitions
            </param>
            <param name='initialTarget'>
            Initial command route target. The command handler will start looking for command handlers in this object.
            </param>
            <param name='closeHandler'>
            EventHandler to be run when the menu closes
            </param> 
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.ShowContextMenu(MonoDevelop.Components.Control,Gdk.EventButton,MonoDevelop.Components.Commands.CommandEntrySet,System.Object)">
            <summary>
            Shows a context menu.
            </summary>
            <param name='parent'>
            Widget for which the context menu is being shown
            </param>
            <param name='evt'>
            Current event
            </param>
            <param name='entrySet'>
            Entry with the command definitions
            </param>
            <param name='initialCommandTarget'>
            Initial command route target. The command handler will start looking for command handlers in this object.
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.ShowContextMenu(MonoDevelop.Components.Control,Gdk.EventButton,MonoDevelop.Components.Commands.CommandEntrySet,System.Object,System.EventHandler)">
            <summary>
            Shows a context menu.
            </summary>
            <param name='parent'>
            Widget for which the context menu is being shown
            </param>
            <param name='evt'>
            Current event
            </param>
            <param name='entrySet'>
            Entry with the command definitions
            </param>
            <param name='initialCommandTarget'>
            Initial command route target. The command handler will start looking for command handlers in this object.
            </param>
            <param name='closeHandler'>
            An event handler which will be called when the menu closes
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.ShowContextMenu(MonoDevelop.Components.Control,System.Int32,System.Int32,MonoDevelop.Components.Commands.CommandEntrySet,System.Object)">
            <summary>
            Shows the context menu.
            </summary>
            <returns><c>true</c>, if context menu was shown, <c>false</c> otherwise.</returns>
            <param name="parent">Widget for which the context menu is shown</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="entrySet">Entry set with the command definitions</param>
            <param name="initialCommandTarget">Initial command target.</param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.ShowContextMenu(MonoDevelop.Components.Control,Gdk.EventButton,Gtk.Menu,System.Object)">
            <summary>
            Shows a context menu.
            </summary>
            <param name='parent'>
            Widget for which the context menu is being shown
            </param>
            <param name='evt'>
            Current event
            </param>
            <param name='menu'>
            Menu to be shown
            </param>
            <param name='initialCommandTarget'>
            Initial command route target. The command handler will start looking for command handlers in this object.
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.ShowContextMenu(Xwt.Widget,System.Int32,System.Int32,MonoDevelop.Components.Commands.CommandEntrySet,System.Object)">
            <summary>
            Shows the context menu.
            </summary>
            <returns><c>true</c>, if context menu was shown, <c>false</c> otherwise.</returns>
            <param name="parent">Widget for which the context menu is shown</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="entrySet">Entry set with the command definitions</param>
            <param name="initialCommandTarget">Initial command target.</param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.DispatchCommand(System.Object)">
            <summary>
            Dispatches a command.
            </summary>
            <returns>
            True if a handler for the command was found
            </returns>
            <param name='commandId'>
            Identifier of the command
            </param>
            <remarks>
            This methods tries to execute a command by looking for a handler in the active command route.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.DispatchCommand(System.Object,MonoDevelop.Components.Commands.CommandSource)">
            <summary>
            Dispatches a command.
            </summary>
            <returns>
            True if a handler for the command was found
            </returns>
            <param name='commandId'>
            Identifier of the command
            </param>
            <param name='source'>
            What is causing the command to be dispatched
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.DispatchCommand(System.Object,System.Object)">
            <summary>
            Dispatches a command.
            </summary>
            <returns>
            True if a handler for the command was found
            </returns>
            <param name='commandId'>
            Identifier of the command
            </param>
            <param name='dataItem'>
            Data item for the command. It must be one of the data items obtained by calling GetCommandInfo.
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.DispatchCommand(System.Object,System.Object,MonoDevelop.Components.Commands.CommandSource)">
            <summary>
            Dispatches a command.
            </summary>
            <returns>
            True if a handler for the command was found
            </returns>
            <param name='commandId'>
            Identifier of the command
            </param>
            <param name='dataItem'>
            Data item for the command. It must be one of the data items obtained by calling GetCommandInfo.
            </param>
            <param name='source'>
            What is causing the command to be dispatched
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.DispatchCommand(System.Object,System.Object,System.Object)">
            <summary>
            Dispatches a command.
            </summary>
            <returns>
            True if a handler for the command was found
            </returns>
            <param name='commandId'>
            Identifier of the command
            </param>
            <param name='dataItem'>
            Data item for the command. It must be one of the data items obtained by calling GetCommandInfo.
            </param>
            <param name='initialTarget'>
            Initial command route target. The command handler will start looking for command handlers in this object.
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.DispatchCommand(System.Object,System.Object,System.Object,MonoDevelop.Components.Commands.CommandSource)">
            <summary>
            Dispatches a command.
            </summary>
            <returns>
            True if a handler for the command was found
            </returns>
            <param name='commandId'>
            Identifier of the command
            </param>
            <param name='dataItem'>
            Data item for the command. It must be one of the data items obtained by calling GetCommandInfo.
            </param>
            <param name='initialTarget'>
            Initial command route target. The command handler will start looking for command handlers in this object.
            </param>
            <param name='source'>
            What is causing the command to be dispatched
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.DispatchCommand(System.Object,System.Object,System.Object,MonoDevelop.Components.Commands.CommandSource,System.Nullable{System.UInt32})">
            <summary>
            Dispatches a command.
            </summary>
            <returns>
            True if a handler for the command was found
            </returns>
            <param name='commandId'>
            Identifier of the command
            </param>
            <param name='dataItem'>
            Data item for the command. It must be one of the data items obtained by calling GetCommandInfo.
            </param>
            <param name='initialTarget'>
            Initial command route target. The command handler will start looking for command handlers in this object.
            </param>
            <param name='source'>
            What is causing the command to be dispatched
            </param>
            <param name='time'>
            The time of the event, if any, that triggered this command
            </param>
        </member>
        <member name="E:MonoDevelop.Components.Commands.CommandManager.CommandActivating">
            <summary>
            Raised just before a command is executed
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.Commands.CommandManager.CommandActivated">
            <summary>
            Raised just after a command has been executed
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.GetCommandInfo(System.Object)">
            <summary>
            Retrieves status information about a command by looking for a handler in the active command route.
            </summary>
            <returns>
            The command information.
            </returns>
            <param name='commandId'>
            Identifier of the command.
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.GetCommandInfo(System.Object,MonoDevelop.Components.Commands.CommandTargetRoute)">
            <summary>
            Retrieves status information about a command by looking for a handler in the active command route.
            </summary>
            <returns>
            The command information.
            </returns>
            <param name='commandId'>
            Identifier of the command.
            </param>
            <param name='targetRoute'>
            Command route origin
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.GetCommandInfo(System.Object,MonoDevelop.Components.Commands.CommandTargetRoute,System.Threading.CancellationToken)">
            <summary>
            Retrieves status information about a command by looking for a handler in the active command route.
            </summary>
            <returns>
            The command information.
            </returns>
            <param name='commandId'>
            Identifier of the command.
            </param>
            <param name='targetRoute'>
            Command route origin
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CommandManager.VisitCommandTargets(MonoDevelop.Components.Commands.ICommandTargetVisitor,System.Object)">
            <summary>
            Visits the active command route
            </summary>
            <returns>
            Visitor result
            </returns>
            <param name='visitor'>
            Visitor.
            </param>
            <param name='initialTarget'>
            Initial target (provide null to use the default initial target)
            </param>
        </member>
        <member name="E:MonoDevelop.Components.Commands.CommandManager.CommandError">
            <summary>
            Raised when there is an exception while executing or updating the status of a command
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.Commands.CommandManager.CommandSelected">
            <summary>
            Raised when a command is highligted in a menu
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.Commands.CommandManager.CommandDeselected">
            <summary>
            Raised when a command is deselected in a manu
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.Commands.CommandManager.ApplicationFocusIn">
            <summary>
            Fired when the application gets the focus
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.Commands.CommandManager.ApplicationFocusOut">
            <summary>
            Fired when the application loses the focus
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.Commands.CommandManager.CommandTargetScanStarted">
            <summary>
            Fired when the command route scan starts
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.Commands.CommandManager.CommandTargetScanFinished">
            <summary>
            Fired when the command route scan ends
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.Commands.CommandManager.KeyPressed">
            <summary>
            Fired when a key is pressed
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.Commands.CommandManager.IncompleteKeyPressed">
            <summary>
            Occurs when incomplete key is pressed.
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.Commands.CommandManager.IncompleteKeyReleased">
            <summary>
            Occurs when incomplete key is released.
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.Commands.CommandManager.ActiveWidgetChanged">
            <summary>
            Occurs when active widget (the current command target) changes
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.Commands.ICommandRouter">
            <summary>
            Redirects the command route to the object returned by GetNextCommandTarget.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.ICommandRouter.GetNextCommandTarget">
            <summary>
            Gets the next command target.
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.Commands.ICommandDelegatorRouter">
            <summary>
            Redirects the command route to the object returned by
            GetDelegatedCommandTarget and when done, continues with
            GetNextCommandTarget.
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.Commands.CommandRouterContainer">
            <summary>
            A container which can be used to redirect the command
            route to a different parent
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.Commands.ICommandTargetVisitor">
            <summary>
            A visitor for the command route
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.ICommandTargetVisitor.Start">
            <summary>
            Called when a visit operation is started
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.ICommandTargetVisitor.Visit(System.Object)">
            <summary>
            Called for every object in the hierarchy
            </summary>
            <param name='ob'>
            Visited object
            </param>
            <returns>
            True if the visit operation has to be stopped
            </returns>
        </member>
        <member name="M:MonoDevelop.Components.Commands.ICommandTargetVisitor.End">
            <summary>
            Called when the visit operation ends
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.KeyBindingManager.AccelLabelFromKey(Gdk.Key,Gdk.ModifierType)">
            <summary>
            Used for canonicalizing bindings after parsing them
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.KeyBindingManager.ShortcutToBinding(System.String)">
            
             Converts the old shortcut format into the new "key binding" format
            
        </member>
        <member name="M:MonoDevelop.Components.Commands.KeyBindingManager.IsShortcutFormat(System.String)">
            
             Returns true if @shortcut is in the old string format or false if it is the newer string format.
            
        </member>
        <member name="M:MonoDevelop.Components.Commands.KeyBindingManager.Commands(MonoDevelop.Components.Commands.KeyBinding)">
            
             Returns the list of commands registered for the specified key binding.
            
        </member>
        <member name="T:MonoDevelop.Components.Commands.ICommandUpdateHandler">
            <summary>
            This interface can be used to create attribute classes which provide custom
            command updating behavior. CustomCommandUpdaterAttribute is a
            default implementation of this interface which may be more convenient to use.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.Commands.ICommandUpdateHandler.Next">
            <summary>
            Next update handler. Set by the command manager.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.ICommandUpdateHandler.CommandUpdate(System.Object,MonoDevelop.Components.Commands.CommandInfo)">
            <summary>
            Called to update the command status. Can call Next.CommandUpdate to execute the default update handler.
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.Commands.ICommandTargetHandler">
            <summary>
            This interface can be used to create attribute classes which provide custom
            command execution behavior. CustomCommandTargetAttribute is a
            default implementation of this interface which may be more convenient to use.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.Commands.ICommandTargetHandler.Next">
            <summary>
            Next command handler. Set by the command manager.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Commands.ICommandTargetHandler.Run(System.Object,MonoDevelop.Components.Commands.Command)">
            <summary>
            Executes the command. Can call Next.Run to execute the default command handler.
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.Commands.CustomCommandUpdaterAttribute">
            <summary>
            Allows customizing the command update behavior at class or method level
            </summary>
            <remarks>
            This base class can be used to create attribute classes which provide custom
            command updating behavior. It can be applied to classes or methods. The overriden CommandUpdate method
            will be called to update the command status.
            
            When applied to a class, the CommandUpdate method is called for all commands for which there is a command
            update handler in the class. 
            
            When applied to a method, the method must be a command update handler (it has to have a [CommandUpdateHandler] attribute),
            and the CommandUpdate method is called only for the command that this method handles.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CustomCommandUpdaterAttribute.CommandUpdate(System.Object,MonoDevelop.Components.Commands.CommandInfo)">
            <summary>
            Updates the status of the command
            </summary>
            <param name='target'>
            Object that implements the command handler
            </param>
            <param name='cinfo'>
            Command info to be updated
            </param>
            <remarks>
            The default implementation of this method calls the update handler implemented
            in the target object. A custom implementation of this method can call
            base.CommandUpdate at any point to get the result of the default implementation.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CustomCommandUpdaterAttribute.CommandUpdate(System.Object,MonoDevelop.Components.Commands.CommandArrayInfo)">
            <summary>
            Updates the status of the command
            </summary>
            <param name='target'>
            Object that implements the command handler
            </param>
            <param name='cinfo'>
            Command info to be updated
            </param>
            <remarks>
            The default implementation of this method calls the update handler implemented
            in the target object. A custom implementation of this method can call
            base.CommandUpdate at any point to get the result of the default implementation.
            </remarks>
        </member>
        <member name="T:MonoDevelop.Components.Commands.CustomCommandTargetAttribute">
            <summary>
            Allows customizing the command execution behavior at class or method level
            </summary>
            <remarks>
            This base class can be used to create attribute classes which provide custom
            command execution behavior. It can be applied to classes or methods. The overriden Run method
            will be called to execute commands.
            
            When applied to a class, the Run method is called for all commands for which there is a command
            handler in the class. 
            
            When applied to a method, the method must be a command handler (it has to have a [CommandHandler] attribute),
            and the Run method is called only for the command that this method handles.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CustomCommandTargetAttribute.Run(System.Object,MonoDevelop.Components.Commands.Command,System.Object)">
            <summary>
            Runs a command
            </summary>
            <param name='target'>
            Object that implements the command handler
            </param>
            <param name='cmd'>
            The command to be executed
            </param>
            <param name='data'>
            Data item provided by the command update handler
            </param>
            <remarks>
            The default implementation of this method runs the command handler method
            to which this attribute is applied. A custom implementation of this method can call
            base.Run at any point to run the method handler, or not call it at all if it
            wants to provide a replacement implementation.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Components.Commands.CustomCommandTargetAttribute.Run(System.Object,MonoDevelop.Components.Commands.Command)">
            <summary>
            Runs a command
            </summary>
            <param name='target'>
            Object that implements the command handler
            </param>
            <param name='cmd'>
            The command to be executed
            </param>
            <remarks>
            The default implementation of this method runs the command handler method
            to which this attribute is applied. A custom implementation of this method can call
            base.Run at any point to run the method handler, or not call it at all if it
            wants to provide a replacement implementation.
            </remarks>
        </member>
        <member name="T:MonoDevelop.Components.Commands.ICommandDelegator">
            <summary>
            Redirects the command route to the object returned by
            GetDelegatedCommandTarget and when done, continues with
            the normal route
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.Extensions.PlatformDialogData">
            <summary>
            Base class for platform dialog data
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.Extensions.PlatformDialog`1">
            <summary>
            Base class to be used to implement platform-specific dialogs.
            T is the handler type.
            U is the data type where data will be hold.
            </summary>
        </member>
        <member name="F:MonoDevelop.Components.Extensions.PlatformDialog`1.data">
            <summary>
            Dialog data
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.Extensions.PlatformDialog`1.Title">
            <summary>
            Title of the dialog.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.Extensions.PlatformDialog`1.TransientFor">
            <summary>
            Parent window.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Extensions.PlatformDialog`1.Run">
            <summary>Shows the dialog </summary>
            <returns> True if the user clicked OK or equivalent.</returns>
        </member>
        <member name="T:MonoDevelop.Components.Extensions.ISelectFileDialogHandler">
            <summary>
            This interface can be implemented to provide a custom implementation
            for the SelectFileDialog dialog.
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.Extensions.SelectFileDialogData">
            <summary>
            Data for the ISelectFileDialogHandler implementation
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.Extensions.SelectFileDialogFilter">
            <summary>
            Filter option to be displayed in file selector dialogs.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.Extensions.SelectFileDialogFilter.Name">
            <summary>Label for the filter</summary>
        </member>
        <member name="P:MonoDevelop.Components.Extensions.SelectFileDialogFilter.Patterns">
            <summary>Filename glob patterns permitted by this filter</summary>
        </member>
        <member name="P:MonoDevelop.Components.Extensions.SelectFileDialogFilter.MimeTypes">
            <summary>MIME types permitted by this filter</summary>
        </member>
        <member name="T:MonoDevelop.Components.Extensions.SelectFileDialog`1">
            <summary>
            Generic class to be used to implement file selectors.
            The T type argument is the type of the handler.
            The U type is the type of the data parameter (must subclass SelectFileDialogData)
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.Extensions.SelectFileDialog`1.Action">
            <summary>
            Action to perform with the file dialog.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.Extensions.SelectFileDialog`1.CurrentFolder">
            <summary>
            Folder to show by default.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.Extensions.SelectFileDialog`1.SelectMultiple">
            <summary>
            Set to True to allow multiple selection.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.Extensions.SelectFileDialog`1.SelectedFiles">
            <summary>
            List of selected files (or folders).
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.Extensions.SelectFileDialog`1.SelectedFile">
            <summary>
            Selected file (or folder) when using single selection mode.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.Extensions.SelectFileDialog`1.InitialFileName">
            <summary>
            File name to show by default.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.Extensions.SelectFileDialog`1.Filters">
            <summary>
            File filters that allow the user to choose the kinds of files the dialog displays.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.Extensions.SelectFileDialog`1.DefaultFilter">
            <summary>
            The default file filter. If there is only one, the user will not have a choice of file types.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.Extensions.SelectFileDialog`1.ShowHidden">
            <summary>
            Gets or sets whether the file dialog will show hidden files and folders.
            show hidden.
            </summary>
            <value><c>true</c> if hidden files are shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MonoDevelop.Components.Extensions.SelectFileDialog`1.AddDefaultFileFilters">
            <summary>
            Adds the default file filters registered by MD core and addins. Includes the All Files filter.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Extensions.SelectFileDialog`1.SaveDefaultFilter">
            <summary>Saves last default filter to MD prefs, if necessary</summary>
        </member>
        <member name="M:MonoDevelop.Components.Extensions.SelectFileDialog`1.SetDefaultProperties(MonoDevelop.Components.FileSelector)">
            <summary>
            Utility method to populate a GTK FileSelector from the data properties.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Extensions.SelectFileDialog`1.RunDefault">
            <summary>Runs the default implementation of the dialog.</summary>
        </member>
        <member name="P:MonoDevelop.Components.PropertyGrid.PropertyEditorCell.DialogueEdit">
            <summary>
            Whether the editor should show a button.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.PropertyGrid.PropertyEditorCell.EditsReadOnlyObject">
            <summary>
            If the property is read-only, is is usually not edited. If the editor
            can edit sub-properties of a read-only complex object, this must return true.
            <remarks>The default value is false.</remarks>
            </summary>
            <returns>True if the editor can edit read-only properties</returns>
        </member>
        <member name="P:MonoDevelop.Components.Docking.DockFrame.CompactGuiLevel">
            <summary>
            Compactness level of the gui, from 1 (not compact) to 5 (very compact).
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Docking.DockFrame.SetRegionStyle(System.String,MonoDevelop.Components.Docking.DockVisualStyle)">
            <summary>
            Sets the style for a region of the dock frame
            </summary>
            <param name='regionPosition'>
            A region is a collection with the format: "ItemId1/Position1;ItemId2/Position2..."
            ItemId is the id of a dock item. Position is one of the values of the DockPosition enumeration
            </param>
            <param name='style'>
            Style.
            </param>
        </member>
        <member name="M:MonoDevelop.Components.Docking.DockFrame.GetRegionStyleForObject(MonoDevelop.Components.Docking.DockObject)">
            <summary>
            Gets the style for a dock object, which will inherit values from all region/style definitions
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.Docking.DockFrame.GetRegionStyleForPosition(MonoDevelop.Components.Docking.DockGroup,System.Int32,System.Boolean)">
            <summary>
            Gets the style assigned to a specific position of the layout
            </summary>
            <returns>
            The region style for position.
            </returns>
            <param name='parentGroup'>
            Group which contains the position
            </param>
            <param name='childIndex'>
            Index of the position inside the group
            </param>
            <param name='insertingPosition'>
            If true, the position will be inserted (meaning that the objects in childIndex will be shifted 1 position)
            </param>
        </member>
        <member name="M:MonoDevelop.Components.AutoTest.AppResult.AddAttribute(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Convenience function to add an attribute to an element
            </summary>
            <param name="element">The element to add the attribute</param>
            <param name="name">The name of the attribute</param>
            <param name="value">The value of the attribute</param>
        </member>
        <member name="M:MonoDevelop.Components.FileFilterSet.AddDefaultFileFilters">
            <summary>
            Adds the default file filters registered by MD core and addins. Includes the All Files filter.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.FileFilterSet.LoadDefaultFilter">
            <summary>Loads last default filter from MD prefs</summary>
        </member>
        <member name="M:MonoDevelop.Components.FileFilterSet.SaveDefaultFilter">
            <summary>Saves last default filter to MD prefs, if necessary</summary>
        </member>
        <member name="T:MonoDevelop.Components.ContextMenuTreeView">
            <summary>
            TreeView with context menu support.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.ContextMenuTreeView.ClearSelectOnRelease">
            <summary>
            Force the tree view's SelectFunction to be reset so nodes an be selected. Sometimes a OnButtonPressEvent
            occurs without any corresponding OnButtonReleaseEvent which prevent a tree node from being selected
            by the TreeNodeNavigator.
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.MainToolbar.ConfigurationMerger">
            <summary>
            This class is used to generate a list of configurations to show in the configuration
            selector of the MonoDevelop toolbar. The class tries to reduce the number of configurations
            by merging those which have the same prefix and build the same project configurations
            for the current startup project. It also can be used to get a list of execution targets.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.ConfigurationMerger.SolutionConfigurations">
            <summary>
            Resulting list of configurations. Some of them may be merged.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.MainToolbar.ConfigurationMerger.Load(MonoDevelop.Projects.Solution,MonoDevelop.Projects.SolutionItem,MonoDevelop.Projects.SolutionItemRunConfiguration)">
            <summary>
            Load configuration information for a solution
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.MainToolbar.ConfigurationMerger.ResolveConfiguration(System.String,MonoDevelop.Core.Execution.ExecutionTarget,System.String@,MonoDevelop.Core.Execution.ExecutionTarget@)">
            <summary>
            Gets the full configuration name given a possibly merged configuration name and execution target
            </summary>
            <param name='currentConfig'>
            A configuration name (can be a merged configuration name)
            </param>
            <param name='currentTarget'>
            Selected execution target
            </param>
            <param name='resolvedConfig'>
            Resolved configuration
            </param>
            <param name='resolvedTarget'>
            If the provided target is not valid for the provided configuration, this returns a valid target
            </param>
        </member>
        <member name="M:MonoDevelop.Components.MainToolbar.ConfigurationMerger.GetTargetsForConfiguration(System.String,System.Boolean)">
            <summary>
            Gets the targets which are valid for a configuration
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.MainToolbar.ConfigurationMerger.GetUnresolvedConfiguration(System.String)">
            <summary>
            Given a full configuration id, returns the merged configuration
            </summary>
        </member>
        <member name="F:MonoDevelop.Components.MainToolbar.ConfigurationMerger.TargetPartition.Targets">
            <summary>
            Targets included in this partition
            </summary>
        </member>
        <member name="F:MonoDevelop.Components.MainToolbar.ConfigurationMerger.TargetPartition.Configurations">
            <summary>
            Project configurations included in this partition
            </summary>
        </member>
        <member name="F:MonoDevelop.Components.MainToolbar.ConfigurationMerger.TargetPartition.SolutionConfigurations">
            <summary>
            Solution configurations included in this partition (configurations which are bound to the project configurations)
            </summary>
        </member>
        <member name="F:MonoDevelop.Components.MainToolbar.ConfigurationMerger.TargetPartition.ReducedConfigurations">
            <summary>
            Configurations (without platform) that have been reduced
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.MainToolbar.MainStatusBarContextImpl">
            <summary>
            The MonoDevelop status bar.
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.MainToolbar.OperationIcon">
            <summary>
            Operation icon corresponding to the Run toolbar button.
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.MainToolbar.HandledEventArgs">
            <summary>
            Event arguments which specify if the event succeeded in at least one handler.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.HandledEventArgs.Handled">
            <summary>
            Accumulator for the Handled value.
            </summary>
            <value><c>true</c> if handled by at least one handler; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MonoDevelop.Components.MainToolbar.IRunButtonView">
            <summary>
            Interface which specificies the minimum working base of a Run Button.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IRunButtonView.RunButtonSensitivity">
            <summary>
            Gets or sets a value indicating whether the run button is interactible.
            </summary>
            <value><c>true</c> if run button is interactible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IRunButtonView.RunButtonIcon">
            <summary>
            Sets the run button icon type.
            </summary>
            <value>The run button icon type.</value>
        </member>
        <member name="E:MonoDevelop.Components.MainToolbar.IRunButtonView.RunButtonClicked">
            <summary>
            Occurs when run button clicked.
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.MainToolbar.ISelectorView">
            <summary>
            Interface which specificies the minimum working base of a Configuration/Platform Selector.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.ISelectorView.ConfigurationPlatformSensitivity">
            <summary>
            Gets or sets a value indicating whether the configuration/platform selector is interactible.
            </summary>
            <value><c>true</c> if configuration/platform selector is interactible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.ISelectorView.PlatformSensitivity">
            <summary>
            Sets a value indicating whether the platform selector is interactible.
            </summary>
            <value><c>true</c> if the platform selector is interactible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.ISelectorView.ActiveConfiguration">
            <summary>
            Gets the active configuration.
            </summary>
            <value>The active configuration.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.ISelectorView.ActiveRunConfiguration">
            <summary>
            Gets the active run configuration.
            </summary>
            <value>The active run configuration.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.ISelectorView.ActiveRuntime">
            <summary>
            Gets the active runtime.
            </summary>
            <value>The active runtime.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.ISelectorView.ConfigurationModel">
            <summary>
            Gets or sets the Configuration model which contains all the usable configurations.
            </summary>
            <value>The configuration model.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.ISelectorView.RunConfigurationModel">
            <summary>
            Gets or sets the Run Configuration model which contains all the usable run configurations.
            </summary>
            <value>The run configuration model.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.ISelectorView.RuntimeModel">
            <summary>
            Gets or sets the Runtime model which contains all usable runtimes.
            </summary>
            <value>The runtime model.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.ISelectorView.RunConfigurationVisible">
            <summary>
            Gets or sets the run configuration selector is visible.
            </summary>
            <value>The run configuration visible.</value>
        </member>
        <member name="E:MonoDevelop.Components.MainToolbar.ISelectorView.ConfigurationChanged">
            <summary>
            Occurs when the configuration changed.
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.MainToolbar.ISelectorView.RunConfigurationChanged">
            <summary>
            Occurs when the run configuration changed.
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.MainToolbar.ISelectorView.RuntimeChanged">
            <summary>
            Occurs when the runtime changed.
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.MainToolbar.ISearchEntryView">
            <summary>
            Interface which specificies the minimum working base of a Search Bar.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.ISearchEntryView.SearchSensivitity">
            <summary>
            Sets a value indicating whether the search entry is interactible.
            </summary>
            <value><c>true</c> if search entry is interactible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.ISearchEntryView.SearchMenuItems">
            <summary>
            Sets the search menu items.
            </summary>
            <value>The search menu items.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.ISearchEntryView.SearchCategory">
            <summary>
            Sets the search category.
            </summary>
            <value>The search category.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.ISearchEntryView.SearchText">
            <summary>
            Gets or sets the search text.
            </summary>
            <value>The search text.</value>
        </member>
        <member name="M:MonoDevelop.Components.MainToolbar.ISearchEntryView.FocusSearchBar">
            <summary>
            Focuses the search entry.
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.MainToolbar.ISearchEntryView.SearchEntryChanged">
            <summary>
            Occurs when the search entry contents changed.
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.MainToolbar.ISearchEntryView.SearchEntryActivated">
            <summary>
            Occurs when the search entry is activated.
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.MainToolbar.ISearchEntryView.SearchEntryKeyPressed">
            <summary>
            Occurs when a key is pressed in the search entry.
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.MainToolbar.ISearchEntryView.SearchEntryResized">
            <summary>
            Occurs when the search entry is resized.
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.MainToolbar.ISearchEntryView.SearchEntryLostFocus">
            <summary>
            Occurs when the search entry lost focus.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.ISearchEntryView.PopupAnchor">
            <summary>
            Gets the UI widget for the popup window to use as an anchor.
            </summary>
            <value>The popup anchor.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.ISearchEntryView.SearchPlaceholderMessage">
            <summary>
            Sets the search entry placeholder message.
            </summary>
            <value>The placeholder message.</value>
        </member>
        <member name="M:MonoDevelop.Components.MainToolbar.ISearchEntryView.ShowAccessibilityAnnouncement(System.String)">
            <summary>
            Shows an accessibility announcement.
            </summary>
            <param name="message">The accessibility message.</param>
        </member>
        <member name="T:MonoDevelop.Components.MainToolbar.IStatusBarView">
            <summary>
            Interface which specificies the minimum working base of a Status Bar.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IStatusBarView.StatusBar">
            <summary>
            Gets the native status bar.
            </summary>
            <value>The native status bar.</value>
        </member>
        <member name="T:MonoDevelop.Components.MainToolbar.IButtonBarView">
            <summary>
            Interface which specificies the minimum working base of a Button Bar.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.MainToolbar.IButtonBarView.RebuildToolbar(System.Collections.Generic.IEnumerable{MonoDevelop.Components.MainToolbar.ButtonBarGroup})">
            <summary>
            Rebuilds the toolbar.
            </summary>
            <param name="groups">A list of ButtonBarGroups.</param>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IButtonBarView.ButtonBarSensitivity">
            <summary>
            Sets a value indicating whether the button bar is interactible.
            </summary>
            <value><c>true</c> if button bar is interactible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MonoDevelop.Components.MainToolbar.IMainToolbarView">
            <summary>
            Interface which specificies the minimum working base of a MainToolbar.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IConfigurationModel.OriginalId">
            <summary>
            Gets the original identifier for the configuration.
            </summary>
            <value>The original identifier.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IConfigurationModel.DisplayString">
            <summary>
            Gest the display string to be used inside a context menu.
            </summary>
            <value>The display string.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IRunConfigurationModel.OriginalId">
            <summary>
            Gets the original identifier for the configuration.
            </summary>
            <value>The original identifier.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IRunConfigurationModel.DisplayString">
            <summary>
            Gest the display string to be used inside a context menu.
            </summary>
            <value>The display string.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IRuntimeModel.Children">
            <summary>
            Gets the items to display as submenu items.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IRuntimeModel.IsSeparator">
            <summary>
            Gets whether the menu item is a separator.
            </summary>
            <value><c>true</c> if this instance is separator; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IRuntimeModel.IsIndented">
            <summary>
            Gets whether the menu item is indented.
            </summary>
            <value><c>true</c> if this instance is indented; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IRuntimeModel.Notable">
            <summary>
            Gets whether the menu item is notable (bold text).
            </summary>
            <value><c>true</c> if notable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IRuntimeModel.Image">
            <summary>
            Gets the menu item's image.
            </summary>
            <value>The image name.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IRuntimeModel.Tooltip">
            <summary>
            Gets the menu item's tooltip.
            </summary>
            <value>The tooltip text</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IRuntimeModel.Project">
            <summary>
            Gets the project to which this runtime belongs.
            </summary>
            <value>The project.</value>
        </member>
        <member name="M:MonoDevelop.Components.MainToolbar.IRuntimeModel.GetMutableModel">
            <summary>
            Gets the runtime combo item model.
            </summary>
            <value>The runtime combo item.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IRuntimeMutableModel.DisplayString">
            <summary>
            Gets the display string to be used inside a context menu.
            </summary>
            <value>The display string.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IRuntimeMutableModel.FullDisplayString">
            <summary>
            Gets the display string to be for selected items.
            </summary>
            <value>The full display string.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IRuntimeMutableModel.Visible">
            <summary>
            Gets whether the menu item is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IRuntimeMutableModel.Enabled">
            <summary>
            Gets whether the menu item is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MonoDevelop.Components.MainToolbar.ISearchMenuModel.NotifyActivated">
            <summary>
            Notifies that the item has been activated.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.ISearchMenuModel.DisplayString">
            <summary>
            Gets the display string to be used in the menu.
            </summary>
            <value>The display string.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IButtonBarButton.Image">
            <summary>
            Gets the icon that should be used for the button.
            </summary>
            <value>The icon id.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IButtonBarButton.Enabled">
            <summary>
            Gets whether the button should be enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IButtonBarButton.Visible">
            <summary>
            Gets whether the button should be visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IButtonBarButton.IsSeparator">
            <summary>
            Gets whether the button is a separator.
            </summary>
            <value><c>true</c> if this instance is separator; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IButtonBarButton.Tooltip">
            <summary>
            Gets the button tooltip.
            </summary>
            <value>The tooltip.</value>
        </member>
        <member name="P:MonoDevelop.Components.MainToolbar.IButtonBarButton.Title">
            <summary>
            Gets the button title
            </summary>
            <value>The title.</value>
        </member>
        <member name="M:MonoDevelop.Components.MainToolbar.IButtonBarButton.NotifyPushed">
            <summary>
            Use this when the button is clicked.
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.MainToolbar.IButtonBarButton.EnabledChanged">
            <summary>
            Occurs when Enabled is changed.
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.MainToolbar.IButtonBarButton.ImageChanged">
            <summary>
            Occurs when the image is changed.
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.MainToolbar.IButtonBarButton.VisibleChanged">
            <summary>
            Occurs when Visible is changed.
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.MainToolbar.IButtonBarButton.TooltipChanged">
            <summary>
            Occurs when the tooltip changed.
            </summary>
        </member>
        <member name="E:MonoDevelop.Components.MainToolbar.IButtonBarButton.TitleChanged">
            Occurs when the title is changed
        </member>
        <member name="P:MonoDevelop.Components.PopoverWindow.MaximumYTopBound">
            <summary>
            Gets or sets the maximum Y top bound. The popover window will be placed below this bound.
            0 means it's not set. Default value: 0
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.PopoverWindowTheme.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.PopoverWindowTheme.PagerBackgroundColor">
            <summary>
            Gets or sets the color of the background color of the pager.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.PopoverWindowTheme.ShadowColor">
            <summary>
            Gets or sets the color of the border of the entire window. Set to transparent to disable border drawing.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.PopoverWindowTheme.PagerTriangleColor">
            <summary>
            Gets or sets the color of the triangle color of the pager.
            </summary>
        </member>
        <member name="F:MonoDevelop.Components.PopoverWindowTheme.pagerTextColor">
            <summary>
            Gets or sets the color of the text color of the pager.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.PopoverWindowTheme.Font">
            <summary>
            Gets or sets the font description to be used for rendering of text elements inside the basic pager window.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.PopoverWindowTheme.CornerRadius">
            <summary>
            Gets or sets the corner radius. Corner radius cannot be set above 0 if ARGB is not supported.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.PopoverWindowTheme.Padding">
            <summary>
            Gets or sets the padding.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.PopoverWindowTheme.DrawPager">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MonoDevelop.Components.PopoverWindowTheme"/> draws a pager.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.PopoverWindowTheme.CurrentPage">
            <summary>
            Gets or sets the current page.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.PopoverWindowTheme.NumPages">
            <summary>
            Gets or sets the number of pages.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.PopoverWindowTheme.PagerVertical">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MonoDevelop.Components.PopoverWindowTheme"/> should use a vertically styled pager.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.PopoverWindowTheme.ShowArrow">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MonoDevelop.Components.PopoverWindowTheme"/> should paint a thumb.
            This value will automatically be set to false if ARGB is not supported.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.PopoverWindowTheme.TargetPosition">
            <summary>
            Gets or sets the target position for the thumb arrow. This may be overriden by the positioning of the window as needed.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.PopoverWindowTheme.SetBackgroundColor(Cairo.Color)">
            <summary>
            Set the background color.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.PopoverWindowTheme.RenderBackground(Cairo.Context,Gdk.Rectangle)">
            <summary>
            Renders the background. Rendering will automatically be clipped to border constraints in later steps.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.PopoverWindowTheme.RenderPager(Cairo.Context,Pango.Context,Gdk.Rectangle)">
            <summary>
            Renders the pager.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.PopoverWindowTheme.SetupPagerText(Pango.Context)">
            <summary>
            Sets the Pango.Layout for pager text as it will be rendered. This will be used to perform sizing on the rest of the pager.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.PopoverWindowTheme.RenderPagerText(Cairo.Context,Pango.Layout,Gdk.Rectangle)">
            <summary>
            Renders the pager text using the results of SetupPagerText.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.PopoverWindowTheme.RenderPagerBackground(Cairo.Context,Gdk.Rectangle)">
            <summary>
            Renders the pager background. Clip is already set to prevent rendering outside of the primary borders of the popoverwindow.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.PopoverWindowTheme.RenderPagerArrow(Cairo.Context,Gdk.Rectangle,Gtk.ArrowType)">
            <summary>
            Renders a single pager arrow inside a bounding box.
            </summary>
        </member>
        <member name="F:MonoDevelop.Components.CellRendererImage.NullImage">
            <summary>
            Image to be used to represent "no image". This is necessary since GLib.Value can't hold
            null values for object that are not of subclasses of GLib.Object
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.DropDownBox.DefaultIconHeight">
            <summary>
            This is so that the height doesn't jump around depending whether there's an icon assigned or not.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.GtkWorkarounds.MapKeys(Gdk.EventKey,Gdk.Key@,Gdk.ModifierType@,MonoDevelop.Components.KeyboardShortcut[]@)">
            <summary>Map raw GTK key input to work around platform bugs and decompose accelerator keys</summary>
            <param name='evt'>The raw key event</param>
            <param name='key'>The composed key</param>
            <param name='state'>The composed modifiers</param>
            <param name='shortcuts'>All the key/modifier decompositions that can be used as accelerators</param>
        </member>
        <member name="M:MonoDevelop.Components.GtkWorkarounds.RightInside(Gdk.Rectangle)">
            <summary>X coordinate of the pixels inside the right edge of the rectangle</summary>
            <remarks>Workaround for inconsistency of Right property between GTK# versions</remarks>
        </member>
        <member name="M:MonoDevelop.Components.GtkWorkarounds.BottomInside(Gdk.Rectangle)">
            <summary>Y coordinate of the pixels inside the bottom edge of the rectangle</summary>
            <remarks>Workaround for inconsistency of Bottom property between GTK# versions#</remarks>
        </member>
        <member name="M:MonoDevelop.Components.GtkWorkarounds.ShowNativeShadow(Gtk.Window,System.Boolean)">
            <summary>
            Shows or hides the shadow of the window rendered by the native toolkit
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.PangoUtil.CreateLayout(Gtk.Widget)">
            <summary>
            This doesn't leak Pango layouts, unlike some other ways to create them in GTK# &lt;= 2.12.11
            </summary>
        </member>
        <member name="T:MonoDevelop.Components.FastPangoAttrList">
            <summary>
            This creates a Pango list and applies attributes to it with *much* less overhead than the GTK# version.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.FastPangoAttrList.InsertOffsetList(Pango.AttrList,System.UInt32,System.UInt32)">
            <summary>
            Like Splice, except it only offsets/clamps the inserted items, doesn't affect items already in the list.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.DockNotebook.DockNotebook.GetNextNotebook">
            <summary>
            Returns the next notebook in the same window
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.DockNotebook.DockNotebook.GetPreviousNotebook">
            <summary>
            Returns the previous notebook in the same window
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.DockNotebook.DockNotebookContainer.GetNextNotebook(MonoDevelop.Components.DockNotebook.DockNotebook)">
            <summary>
            Returns the next notebook in the same window
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.DockNotebook.DockNotebookContainer.GetPreviousNotebook(MonoDevelop.Components.DockNotebook.DockNotebook)">
            <summary>
            Returns the previous notebook in the same window
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.ContextMenu.CollapseSeparators">
            <summary>
            Removes all separators of the menu which follow another separator
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.ContextMenuItem.UseMnemonic">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MonoDevelop.Components.ContextMenuItem"/> uses a mnemonic.
            </summary>
            <value><c>true</c> if it uses a mnemonic; otherwise, <c>false</c>.</value>
            <remarks>
            When set to true, the character after the first underscore character in the Label property value is
            interpreted as the mnemonic for that Label.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Components.EventBoxTooltip.#ctor(Gtk.EventBox)">
            <summary>
            The EventBox should have Visible set to false otherwise the tooltip pop window
            will have the wrong location.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.XwtPopup.MaximumYTopBound">
            <summary>
            Gets or sets the maximum Y top bound. The popover window will be placed below this bound.
            0 means it's not set. Default value: 0
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.XwtPopupWindowTheme.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.XwtPopupWindowTheme.PagerBackgroundColor">
            <summary>
            Gets or sets the color of the background color of the pager.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.XwtPopupWindowTheme.BorderColor">
            <summary>
            Gets or sets the color of the border of the entire window. Set to transparent to disable border drawing.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.XwtPopupWindowTheme.ShadowColor">
            <summary>
            Gets or sets the color of the bottom shadow border of the window. Set to transparent to disable shadow drawing.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.XwtPopupWindowTheme.PagerTriangleColor">
            <summary>
            Gets or sets the color of the triangle color of the pager.
            </summary>
        </member>
        <member name="F:MonoDevelop.Components.XwtPopupWindowTheme.pagerTextColor">
            <summary>
            Gets or sets the color of the text color of the pager.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.XwtPopupWindowTheme.Font">
            <summary>
            Gets or sets the font description to be used for rendering of text elements inside the basic pager window.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.XwtPopupWindowTheme.CornerRadius">
            <summary>
            Gets or sets the corner radius. Corner radius cannot be set above 0 if ARGB is not supported.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.XwtPopupWindowTheme.Padding">
            <summary>
            Gets or sets the padding.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.XwtPopupWindowTheme.DrawPager">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MonoDevelop.Components.PopoverWindowTheme"/> draws a pager.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.XwtPopupWindowTheme.CurrentPage">
            <summary>
            Gets or sets the current page.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.XwtPopupWindowTheme.NumPages">
            <summary>
            Gets or sets the number of pages.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.XwtPopupWindowTheme.PagerVertical">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MonoDevelop.Components.PopoverWindowTheme"/> should use a vertically styled pager.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.XwtPopupWindowTheme.ShowArrow">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MonoDevelop.Components.PopoverWindowTheme"/> should paint a thumb.
            This value will automatically be set to false if ARGB is not supported.
            </summary>
        </member>
        <member name="P:MonoDevelop.Components.XwtPopupWindowTheme.TargetPosition">
            <summary>
            Gets or sets the target position for the thumb arrow. This may be overriden by the positioning of the window as needed.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.XwtPopupWindowTheme.SetBackgroundColor(Xwt.Drawing.Color)">
            <summary>
            Set the background color.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.XwtPopupWindowTheme.FillBackground(Xwt.Drawing.Context)">
            <summary>
            Renders the background. Rendering will automatically be clipped to border constraints in later steps.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.XwtPopupWindowTheme.RenderBackground(Xwt.Drawing.Context,Xwt.Rectangle,MonoDevelop.Components.PopupPosition)">
            <summary>
            Renders the background and clips the context to the visible border.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.XwtPopupWindowTheme.RenderPager(Xwt.Drawing.Context,Xwt.Rectangle)">
            <summary>
            Renders the pager.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.XwtPopupWindowTheme.SetupPagerText">
            <summary>
            Sets the Pango.Layout for pager text as it will be rendered. This will be used to perform sizing on the rest of the pager.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.XwtPopupWindowTheme.RenderPagerText(Xwt.Drawing.Context,Xwt.Drawing.TextLayout,Xwt.Rectangle)">
            <summary>
            Renders the pager text using the results of SetupPagerText.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.XwtPopupWindowTheme.RenderPagerBackground(Xwt.Drawing.Context,Xwt.Rectangle)">
            <summary>
            Renders the pager background. Clip is already set to prevent rendering outside of the primary borders of the popoverwindow.
            </summary>
        </member>
        <member name="M:MonoDevelop.Components.XwtPopupWindowTheme.RenderPagerArrow(Xwt.Drawing.Context,Xwt.Rectangle,MonoDevelop.Components.PagerArrowDirection)">
            <summary>
            Renders a single pager arrow inside a bounding box.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Platform.NewTextSnapshotToTextReader.Close">
            <summary>
            Closes the reader and releases any associated system resources.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Platform.NewTextSnapshotToTextReader.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the reader.
            </summary>
            <param name="disposing">Whether to release managed resources.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Platform.NewTextSnapshotToTextReader.Peek">
            <summary>
            Returns the next character without changing the state of the reader or the
            character source.
            </summary>
            <returns>The next character to be read, or -1 if no more characters are available or the stream does not support seeking.</returns>
            <exception cref="T:System.ObjectDisposedException">The reader is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Platform.NewTextSnapshotToTextReader.Read">
            <summary>
            Reads the next character from the input stream and advances the character
            position by one character.
            </summary>
            <returns>The next character from the input stream, or -1 if no more characters are available.</returns>
            <exception cref="T:System.ObjectDisposedException">The reader is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Platform.NewTextSnapshotToTextReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads the specified number of characters from the current stream and writes the
            data to the buffer, beginning at the specified location.
            </summary>
            <param name="buffer">When this method returns, contains the specified character array from the current source.</param>
            <param name="index">The place in buffer at which to begin writing.</param>
            <param name="count">The maximum number of characters to read.</param>
            <returns>The number of characters that have been read. The number will be less than
            or equal to <paramref name="count"/>, depending on whether the data is available within the
            stream. This method returns zero if called when no more characters are left to read.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is negative, or
            the buffer length minus index is less than <paramref name="count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The reader is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Platform.NewTextSnapshotToTextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a maximum of <paramref name="count"/> characters from the current stream and writes the
            data to buffer, beginning at index.
            </summary>
            <param name="buffer">When this method returns, contains the specified character array from the current source.</param>
            <param name="index">The place in buffer at which to begin writing.</param>
            <param name="count">The maximum number of characters to read.</param>
            <returns>The number of characters that have been read. The number will be less than
            or equal to <paramref name="count"/>, depending on whether the data is available within the
            stream. This method returns zero if called when no more characters are left to read.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is negative, or
            the buffer length minus index is less than <paramref name="count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The reader is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Platform.NewTextSnapshotToTextReader.ReadLine">
            <summary>Reads a line of characters from the current stream and returns the data as a string.</summary>
            <returns>The next line from the input stream, or null if all characters have been read.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader"/> is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Platform.NewTextSnapshotToTextReader.ReadToEnd">
            <summary>Reads all the characters from the current position to the end of the reader and returns them as a string.</summary>
            <returns>A string containing all the characters from the current position to the end of the reader.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader"/> is closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Platform.NewTextSnapshotToTextReader.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.TextSnapshotToTextReader"/> with the specified text snapshot.
            </summary>
            <param name="textSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> to expose as a reader.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="textSnapshot"/> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService">
            <summary>
            Creates editor views.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            ITextEditorFactoryService factory = null;
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.NoRoles">
            <summary>
            The empty ITextViewRoleSet.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.AllPredefinedRoles">
            <summary>
            The set of all predefined text view roles.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.DefaultRoles">
            <summary>
            The set of roles that are used when creating a text view without specifying text view roles.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextViewRoleSet(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet"/> containing the given roles.
            </summary>
            <param name="roles">The roles of interest.</param>
            <returns>The text view role set.</returns>
            <exception cref="T:System.ArgumentNullException"> roles is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.CreateTextViewRoleSet(System.String[])">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet"/> containing the given roles.
            </summary>
            <param name="roles">The roles of interest.</param>
            <returns>The text view role set.</returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService.TextViewCreated">
            <summary>
            Raised when any <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> is created.
            </summary>
        </member>
    </members>
</doc>
